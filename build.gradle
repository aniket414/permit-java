/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java library project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.3.3/userguide/building_java_projects.html
 */

plugins {
    // Apply the java-library plugin for API and implementation separation.
    id 'java-library'
    // Maven publish plugins helps us to publish our library to maven repos
    id 'maven-publish'
    // the signing plugin helps us to crypto-sign on our package (PGP key)
    id 'signing'
    // the git-version plugin helps us to publish an auto version (taken from git tags)
    id 'com.palantir.git-version' version '0.13.0'
}

// sets the java package version automatically (looks at the git repo, latest tags, commit hashes, etc)
version gitVersion()

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

java {
    // sources are required by maven central in order to accept the package
    withSourcesJar()
    // javadoc jar is required by maven central in order to accept the package
    withJavadocJar()
}

// package dependencies
dependencies {
    implementation 'ch.qos.logback:logback-classic:1.2.10'
    implementation 'ch.qos.logback:logback-core:1.2.10'
    implementation 'org.slf4j:slf4j-api:1.7.33'

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.2'

    // These dependencies are used internally, and not exposed to consumers on their own compile classpath.
    // google standard java library
    implementation 'com.google.guava:guava:30.1.1-jre'
    // json serialization and deserialization
    implementation 'com.google.code.gson:gson:2.8.9'
    // http client
    implementation 'com.squareup.okhttp3:okhttp:4.9.3'
}

publishing {
    repositories {
        maven {
            name = "OSSRH"
            url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username = System.getenv("OSSRH_USERNAME")
                password = System.getenv("OSSRH_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = "https://maven.pkg.github.com/permitio/permit-java"
            credentials {
                username = System.getenv("GITHUB_ACTOR")
                password = System.getenv("GITHUB_TOKEN")
            }
        }
    }


    publications {
        maven(MavenPublication) {
            groupId = 'io.permit'
            artifactId = 'sdk'

            from components.java

            pom {
                description = 'Java SDK for Permit.io: fullstack permissions for cloud native applications'
                url = 'https://permit.io'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'asafc'
                        name = 'Asaf Cohen'
                        email = 'asaf@permit.io'
                    }
                }
                scm {
                    url = 'https://github.com/permitio/permit-java'
                }
            }
        }
    }
}

signing {
    def GPG_SIGNING_KEY = findProperty("signingKey") ?: System.getenv("GPG_SIGNING_KEY")
    def GPG_SIGNING_PASSPHRASE = findProperty("signingPassword") ?: System.getenv("GPG_SIGNING_PASSPHRASE")
    useInMemoryPgpKeys(GPG_SIGNING_KEY, GPG_SIGNING_PASSPHRASE)
    sign publishing.publications.maven
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.named('jar') {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version)
    }
}