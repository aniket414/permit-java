/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.api;

import io.permit.sdk.openapi.ApiCallback;
import io.permit.sdk.openapi.ApiClient;
import io.permit.sdk.openapi.ApiException;
import io.permit.sdk.openapi.ApiResponse;
import io.permit.sdk.openapi.Configuration;
import io.permit.sdk.openapi.Pair;
import io.permit.sdk.openapi.ProgressRequestBody;
import io.permit.sdk.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.permit.sdk.openapi.model.HTTPValidationError;
import io.permit.sdk.openapi.model.NewRemoteTenant;
import io.permit.sdk.openapi.model.NewTenant;
import io.permit.sdk.openapi.model.Tenant;
import io.permit.sdk.openapi.model.TenantList;
import java.util.UUID;
import io.permit.sdk.openapi.model.UpdateTenant;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1TenantsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1TenantsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1TenantsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createTenantV1TenantsPost
     * @param newTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createTenantV1TenantsPostCall(NewTenant newTenant, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newTenant;

        // create path and map variables
        String localVarPath = "/v1/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTenantV1TenantsPostValidateBeforeCall(NewTenant newTenant, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newTenant' is set
        if (newTenant == null) {
            throw new ApiException("Missing the required parameter 'newTenant' when calling createTenantV1TenantsPost(Async)");
        }
        

        okhttp3.Call localVarCall = createTenantV1TenantsPostCall(newTenant, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Create Tenant
     * Create a new Tenant under the active organization.
     * @param newTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return Tenant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Tenant createTenantV1TenantsPost(NewTenant newTenant, String xOrganizationId) throws ApiException {
        ApiResponse<Tenant> localVarResp = createTenantV1TenantsPostWithHttpInfo(newTenant, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Create Tenant
     * Create a new Tenant under the active organization.
     * @param newTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Tenant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Tenant> createTenantV1TenantsPostWithHttpInfo(NewTenant newTenant, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = createTenantV1TenantsPostValidateBeforeCall(newTenant, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<Tenant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Tenant (asynchronously)
     * Create a new Tenant under the active organization.
     * @param newTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createTenantV1TenantsPostAsync(NewTenant newTenant, String xOrganizationId, final ApiCallback<Tenant> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTenantV1TenantsPostValidateBeforeCall(newTenant, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<Tenant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteTenantV1TenantsTenantIdDelete
     * @param tenantId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteTenantV1TenantsTenantIdDeleteCall(UUID tenantId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tenants/{tenant_id}"
            .replaceAll("\\{" + "tenant_id" + "\\}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteTenantV1TenantsTenantIdDeleteValidateBeforeCall(UUID tenantId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling deleteTenantV1TenantsTenantIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteTenantV1TenantsTenantIdDeleteCall(tenantId, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Delete Tenant
     * Delete an existing Tenant.
     * @param tenantId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteTenantV1TenantsTenantIdDelete(UUID tenantId, String xOrganizationId) throws ApiException {
        deleteTenantV1TenantsTenantIdDeleteWithHttpInfo(tenantId, xOrganizationId);
    }

    /**
     * Delete Tenant
     * Delete an existing Tenant.
     * @param tenantId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteTenantV1TenantsTenantIdDeleteWithHttpInfo(UUID tenantId, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = deleteTenantV1TenantsTenantIdDeleteValidateBeforeCall(tenantId, xOrganizationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Tenant (asynchronously)
     * Delete an existing Tenant.
     * @param tenantId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteTenantV1TenantsTenantIdDeleteAsync(UUID tenantId, String xOrganizationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteTenantV1TenantsTenantIdDeleteValidateBeforeCall(tenantId, xOrganizationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getTenantV1TenantsTenantIdGet
     * @param tenantId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getTenantV1TenantsTenantIdGetCall(UUID tenantId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tenants/{tenant_id}"
            .replaceAll("\\{" + "tenant_id" + "\\}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getTenantV1TenantsTenantIdGetValidateBeforeCall(UUID tenantId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling getTenantV1TenantsTenantIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = getTenantV1TenantsTenantIdGetCall(tenantId, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Get Tenant
     * Retrieve Tenant details.
     * @param tenantId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return Tenant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Tenant getTenantV1TenantsTenantIdGet(UUID tenantId, String xOrganizationId) throws ApiException {
        ApiResponse<Tenant> localVarResp = getTenantV1TenantsTenantIdGetWithHttpInfo(tenantId, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Get Tenant
     * Retrieve Tenant details.
     * @param tenantId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Tenant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Tenant> getTenantV1TenantsTenantIdGetWithHttpInfo(UUID tenantId, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = getTenantV1TenantsTenantIdGetValidateBeforeCall(tenantId, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<Tenant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Tenant (asynchronously)
     * Retrieve Tenant details.
     * @param tenantId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getTenantV1TenantsTenantIdGetAsync(UUID tenantId, String xOrganizationId, final ApiCallback<Tenant> _callback) throws ApiException {

        okhttp3.Call localVarCall = getTenantV1TenantsTenantIdGetValidateBeforeCall(tenantId, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<Tenant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTenantsV1TenantsGet
     * @param environment filter only objects belonging to this environment (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listTenantsV1TenantsGetCall(UUID environment, Integer skip, Integer limit, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTenantsV1TenantsGetValidateBeforeCall(UUID environment, Integer skip, Integer limit, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listTenantsV1TenantsGetCall(environment, skip, limit, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * List Tenants
     * 
     * @param environment filter only objects belonging to this environment (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return TenantList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public TenantList listTenantsV1TenantsGet(UUID environment, Integer skip, Integer limit, String xOrganizationId) throws ApiException {
        ApiResponse<TenantList> localVarResp = listTenantsV1TenantsGetWithHttpInfo(environment, skip, limit, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * List Tenants
     * 
     * @param environment filter only objects belonging to this environment (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;TenantList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<TenantList> listTenantsV1TenantsGetWithHttpInfo(UUID environment, Integer skip, Integer limit, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = listTenantsV1TenantsGetValidateBeforeCall(environment, skip, limit, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<TenantList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Tenants (asynchronously)
     * 
     * @param environment filter only objects belonging to this environment (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listTenantsV1TenantsGetAsync(UUID environment, Integer skip, Integer limit, String xOrganizationId, final ApiCallback<TenantList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTenantsV1TenantsGetValidateBeforeCall(environment, skip, limit, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<TenantList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for syncTenant
     * @param newRemoteTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call syncTenantCall(NewRemoteTenant newRemoteTenant, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newRemoteTenant;

        // create path and map variables
        String localVarPath = "/v1/tenants";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call syncTenantValidateBeforeCall(NewRemoteTenant newRemoteTenant, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newRemoteTenant' is set
        if (newRemoteTenant == null) {
            throw new ApiException("Missing the required parameter 'newRemoteTenant' when calling syncTenant(Async)");
        }
        

        okhttp3.Call localVarCall = syncTenantCall(newRemoteTenant, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Sync Tenant
     * Create the Tenant if it doesn&#39;t already exist.
     * @param newRemoteTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return Tenant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Tenant syncTenant(NewRemoteTenant newRemoteTenant, String xOrganizationId) throws ApiException {
        ApiResponse<Tenant> localVarResp = syncTenantWithHttpInfo(newRemoteTenant, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Sync Tenant
     * Create the Tenant if it doesn&#39;t already exist.
     * @param newRemoteTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Tenant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Tenant> syncTenantWithHttpInfo(NewRemoteTenant newRemoteTenant, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = syncTenantValidateBeforeCall(newRemoteTenant, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<Tenant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Sync Tenant (asynchronously)
     * Create the Tenant if it doesn&#39;t already exist.
     * @param newRemoteTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call syncTenantAsync(NewRemoteTenant newRemoteTenant, String xOrganizationId, final ApiCallback<Tenant> _callback) throws ApiException {

        okhttp3.Call localVarCall = syncTenantValidateBeforeCall(newRemoteTenant, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<Tenant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateTenantV1TenantsTenantIdPatch
     * @param tenantId  (required)
     * @param updateTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateTenantV1TenantsTenantIdPatchCall(UUID tenantId, UpdateTenant updateTenant, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateTenant;

        // create path and map variables
        String localVarPath = "/v1/tenants/{tenant_id}"
            .replaceAll("\\{" + "tenant_id" + "\\}", localVarApiClient.escapeString(tenantId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateTenantV1TenantsTenantIdPatchValidateBeforeCall(UUID tenantId, UpdateTenant updateTenant, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'tenantId' is set
        if (tenantId == null) {
            throw new ApiException("Missing the required parameter 'tenantId' when calling updateTenantV1TenantsTenantIdPatch(Async)");
        }
        
        // verify the required parameter 'updateTenant' is set
        if (updateTenant == null) {
            throw new ApiException("Missing the required parameter 'updateTenant' when calling updateTenantV1TenantsTenantIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = updateTenantV1TenantsTenantIdPatchCall(tenantId, updateTenant, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Update Tenant
     * Update the Tenant data.
     * @param tenantId  (required)
     * @param updateTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return Tenant
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Tenant updateTenantV1TenantsTenantIdPatch(UUID tenantId, UpdateTenant updateTenant, String xOrganizationId) throws ApiException {
        ApiResponse<Tenant> localVarResp = updateTenantV1TenantsTenantIdPatchWithHttpInfo(tenantId, updateTenant, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Update Tenant
     * Update the Tenant data.
     * @param tenantId  (required)
     * @param updateTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Tenant&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Tenant> updateTenantV1TenantsTenantIdPatchWithHttpInfo(UUID tenantId, UpdateTenant updateTenant, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = updateTenantV1TenantsTenantIdPatchValidateBeforeCall(tenantId, updateTenant, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<Tenant>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Tenant (asynchronously)
     * Update the Tenant data.
     * @param tenantId  (required)
     * @param updateTenant  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateTenantV1TenantsTenantIdPatchAsync(UUID tenantId, UpdateTenant updateTenant, String xOrganizationId, final ApiCallback<Tenant> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateTenantV1TenantsTenantIdPatchValidateBeforeCall(tenantId, updateTenant, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<Tenant>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
