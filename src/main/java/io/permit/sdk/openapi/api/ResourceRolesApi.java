/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.api;

import io.permit.sdk.openapi.ApiCallback;
import io.permit.sdk.openapi.ApiClient;
import io.permit.sdk.openapi.ApiException;
import io.permit.sdk.openapi.ApiResponse;
import io.permit.sdk.openapi.Configuration;
import io.permit.sdk.openapi.Pair;
import io.permit.sdk.openapi.ProgressRequestBody;
import io.permit.sdk.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.permit.sdk.openapi.model.AddRolePermissions;
import io.permit.sdk.openapi.model.HTTPValidationError;
import io.permit.sdk.openapi.model.RemoveRolePermissions;
import io.permit.sdk.openapi.model.ResourceRoleCreate;
import io.permit.sdk.openapi.model.ResourceRoleRead;
import io.permit.sdk.openapi.model.ResourceRoleUpdate;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ResourceRolesApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ResourceRolesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public ResourceRolesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for addParentResourceRole
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParentResourceRoleCall(String projId, String envId, String resourceId, String roleId, String parentRoleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/parents/{parent_role_id}"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", localVarApiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()))
            .replaceAll("\\{" + "parent_role_id" + "\\}", localVarApiClient.escapeString(parentRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addParentResourceRoleValidateBeforeCall(String projId, String envId, String resourceId, String roleId, String parentRoleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling addParentResourceRole(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling addParentResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling addParentResourceRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling addParentResourceRole(Async)");
        }
        
        // verify the required parameter 'parentRoleId' is set
        if (parentRoleId == null) {
            throw new ApiException("Missing the required parameter 'parentRoleId' when calling addParentResourceRole(Async)");
        }
        

        okhttp3.Call localVarCall = addParentResourceRoleCall(projId, envId, resourceId, roleId, parentRoleId, _callback);
        return localVarCall;

    }

    /**
     * Add Parent Role
     * This endpoint is part of the role hierarchy feature.  Makes role with id &#x60;role_id&#x60; extend the role with id &#x60;parent_role_id&#x60;. In other words, &#x60;role_id&#x60; will automatically be assigned any permissions that are granted to &#x60;parent_role_id&#x60;.  We can say the &#x60;role_id&#x60; **extends** &#x60;parent_role_id&#x60; or **inherits** from &#x60;parent_role_id&#x60;.  If &#x60;role_id&#x60; is already an ancestor of &#x60;parent_role_id&#x60;, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.  Both roles must be defined on the same resource, identified by id &#x60;resource_id&#x60;.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;). (required)
     * @return ResourceRoleRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRoleRead addParentResourceRole(String projId, String envId, String resourceId, String roleId, String parentRoleId) throws ApiException {
        ApiResponse<ResourceRoleRead> localVarResp = addParentResourceRoleWithHttpInfo(projId, envId, resourceId, roleId, parentRoleId);
        return localVarResp.getData();
    }

    /**
     * Add Parent Role
     * This endpoint is part of the role hierarchy feature.  Makes role with id &#x60;role_id&#x60; extend the role with id &#x60;parent_role_id&#x60;. In other words, &#x60;role_id&#x60; will automatically be assigned any permissions that are granted to &#x60;parent_role_id&#x60;.  We can say the &#x60;role_id&#x60; **extends** &#x60;parent_role_id&#x60; or **inherits** from &#x60;parent_role_id&#x60;.  If &#x60;role_id&#x60; is already an ancestor of &#x60;parent_role_id&#x60;, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.  Both roles must be defined on the same resource, identified by id &#x60;resource_id&#x60;.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;). (required)
     * @return ApiResponse&lt;ResourceRoleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRoleRead> addParentResourceRoleWithHttpInfo(String projId, String envId, String resourceId, String roleId, String parentRoleId) throws ApiException {
        okhttp3.Call localVarCall = addParentResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, parentRoleId, null);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add Parent Role (asynchronously)
     * This endpoint is part of the role hierarchy feature.  Makes role with id &#x60;role_id&#x60; extend the role with id &#x60;parent_role_id&#x60;. In other words, &#x60;role_id&#x60; will automatically be assigned any permissions that are granted to &#x60;parent_role_id&#x60;.  We can say the &#x60;role_id&#x60; **extends** &#x60;parent_role_id&#x60; or **inherits** from &#x60;parent_role_id&#x60;.  If &#x60;role_id&#x60; is already an ancestor of &#x60;parent_role_id&#x60;, the request will fail with HTTP 400 to prevent a cycle in the role hierarchy.  Both roles must be defined on the same resource, identified by id &#x60;resource_id&#x60;.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addParentResourceRoleAsync(String projId, String envId, String resourceId, String roleId, String parentRoleId, final ApiCallback<ResourceRoleRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = addParentResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, parentRoleId, _callback);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for assignPermissionsToResourceRole
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param addRolePermissions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignPermissionsToResourceRoleCall(String projId, String envId, String resourceId, String roleId, AddRolePermissions addRolePermissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = addRolePermissions;

        // create path and map variables
        String localVarPath = "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", localVarApiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call assignPermissionsToResourceRoleValidateBeforeCall(String projId, String envId, String resourceId, String roleId, AddRolePermissions addRolePermissions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling assignPermissionsToResourceRole(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling assignPermissionsToResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling assignPermissionsToResourceRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling assignPermissionsToResourceRole(Async)");
        }
        
        // verify the required parameter 'addRolePermissions' is set
        if (addRolePermissions == null) {
            throw new ApiException("Missing the required parameter 'addRolePermissions' when calling assignPermissionsToResourceRole(Async)");
        }
        

        okhttp3.Call localVarCall = assignPermissionsToResourceRoleCall(projId, envId, resourceId, roleId, addRolePermissions, _callback);
        return localVarCall;

    }

    /**
     * Assign Permissions to Role
     * Assign permissions to role.  If some of the permissions specified are already unassigned, will skip them.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param addRolePermissions  (required)
     * @return ResourceRoleRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRoleRead assignPermissionsToResourceRole(String projId, String envId, String resourceId, String roleId, AddRolePermissions addRolePermissions) throws ApiException {
        ApiResponse<ResourceRoleRead> localVarResp = assignPermissionsToResourceRoleWithHttpInfo(projId, envId, resourceId, roleId, addRolePermissions);
        return localVarResp.getData();
    }

    /**
     * Assign Permissions to Role
     * Assign permissions to role.  If some of the permissions specified are already unassigned, will skip them.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param addRolePermissions  (required)
     * @return ApiResponse&lt;ResourceRoleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRoleRead> assignPermissionsToResourceRoleWithHttpInfo(String projId, String envId, String resourceId, String roleId, AddRolePermissions addRolePermissions) throws ApiException {
        okhttp3.Call localVarCall = assignPermissionsToResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, addRolePermissions, null);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Assign Permissions to Role (asynchronously)
     * Assign permissions to role.  If some of the permissions specified are already unassigned, will skip them.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param addRolePermissions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call assignPermissionsToResourceRoleAsync(String projId, String envId, String resourceId, String roleId, AddRolePermissions addRolePermissions, final ApiCallback<ResourceRoleRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = assignPermissionsToResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, addRolePermissions, _callback);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createResourceRole
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceRoleCreate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceRoleCall(String projId, String envId, String resourceId, ResourceRoleCreate resourceRoleCreate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceRoleCreate;

        // create path and map variables
        String localVarPath = "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createResourceRoleValidateBeforeCall(String projId, String envId, String resourceId, ResourceRoleCreate resourceRoleCreate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling createResourceRole(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling createResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling createResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceRoleCreate' is set
        if (resourceRoleCreate == null) {
            throw new ApiException("Missing the required parameter 'resourceRoleCreate' when calling createResourceRole(Async)");
        }
        

        okhttp3.Call localVarCall = createResourceRoleCall(projId, envId, resourceId, resourceRoleCreate, _callback);
        return localVarCall;

    }

    /**
     * Create Resource Role
     * Creates a new role associated with the resource.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceRoleCreate  (required)
     * @return ResourceRoleRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRoleRead createResourceRole(String projId, String envId, String resourceId, ResourceRoleCreate resourceRoleCreate) throws ApiException {
        ApiResponse<ResourceRoleRead> localVarResp = createResourceRoleWithHttpInfo(projId, envId, resourceId, resourceRoleCreate);
        return localVarResp.getData();
    }

    /**
     * Create Resource Role
     * Creates a new role associated with the resource.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceRoleCreate  (required)
     * @return ApiResponse&lt;ResourceRoleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRoleRead> createResourceRoleWithHttpInfo(String projId, String envId, String resourceId, ResourceRoleCreate resourceRoleCreate) throws ApiException {
        okhttp3.Call localVarCall = createResourceRoleValidateBeforeCall(projId, envId, resourceId, resourceRoleCreate, null);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Resource Role (asynchronously)
     * Creates a new role associated with the resource.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceRoleCreate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createResourceRoleAsync(String projId, String envId, String resourceId, ResourceRoleCreate resourceRoleCreate, final ApiCallback<ResourceRoleRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = createResourceRoleValidateBeforeCall(projId, envId, resourceId, resourceRoleCreate, _callback);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteResourceRole
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceRoleCall(String projId, String envId, String resourceId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", localVarApiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteResourceRoleValidateBeforeCall(String projId, String envId, String resourceId, String roleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling deleteResourceRole(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling deleteResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling deleteResourceRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling deleteResourceRole(Async)");
        }
        

        okhttp3.Call localVarCall = deleteResourceRoleCall(projId, envId, resourceId, roleId, _callback);
        return localVarCall;

    }

    /**
     * Delete Resource Role
     * Deletes the role and all its related data. This includes any permissions granted to said role.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public void deleteResourceRole(String projId, String envId, String resourceId, String roleId) throws ApiException {
        deleteResourceRoleWithHttpInfo(projId, envId, resourceId, roleId);
    }

    /**
     * Delete Resource Role
     * Deletes the role and all its related data. This includes any permissions granted to said role.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Void> deleteResourceRoleWithHttpInfo(String projId, String envId, String resourceId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = deleteResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Resource Role (asynchronously)
     * Deletes the role and all its related data. This includes any permissions granted to said role.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteResourceRoleAsync(String projId, String envId, String resourceId, String roleId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getResourceRole
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceRoleCall(String projId, String envId, String resourceId, String roleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", localVarApiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getResourceRoleValidateBeforeCall(String projId, String envId, String resourceId, String roleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling getResourceRole(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling getResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling getResourceRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling getResourceRole(Async)");
        }
        

        okhttp3.Call localVarCall = getResourceRoleCall(projId, envId, resourceId, roleId, _callback);
        return localVarCall;

    }

    /**
     * Get Resource Role
     * Gets a single role defined on the resource, if such role exists.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @return ResourceRoleRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRoleRead getResourceRole(String projId, String envId, String resourceId, String roleId) throws ApiException {
        ApiResponse<ResourceRoleRead> localVarResp = getResourceRoleWithHttpInfo(projId, envId, resourceId, roleId);
        return localVarResp.getData();
    }

    /**
     * Get Resource Role
     * Gets a single role defined on the resource, if such role exists.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @return ApiResponse&lt;ResourceRoleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRoleRead> getResourceRoleWithHttpInfo(String projId, String envId, String resourceId, String roleId) throws ApiException {
        okhttp3.Call localVarCall = getResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, null);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Resource Role (asynchronously)
     * Gets a single role defined on the resource, if such role exists.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getResourceRoleAsync(String projId, String envId, String resourceId, String roleId, final ApiCallback<ResourceRoleRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = getResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, _callback);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listResourceRoles
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourceRolesCall(String projId, String envId, String resourceId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", localVarApiClient.escapeString(resourceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listResourceRolesValidateBeforeCall(String projId, String envId, String resourceId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling listResourceRoles(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling listResourceRoles(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling listResourceRoles(Async)");
        }
        

        okhttp3.Call localVarCall = listResourceRolesCall(projId, envId, resourceId, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * List Resource Roles
     * Lists all the roles defined on the resource.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return List&lt;ResourceRoleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<ResourceRoleRead> listResourceRoles(String projId, String envId, String resourceId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<ResourceRoleRead>> localVarResp = listResourceRolesWithHttpInfo(projId, envId, resourceId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List Resource Roles
     * Lists all the roles defined on the resource.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;List&lt;ResourceRoleRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<ResourceRoleRead>> listResourceRolesWithHttpInfo(String projId, String envId, String resourceId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listResourceRolesValidateBeforeCall(projId, envId, resourceId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<ResourceRoleRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Resource Roles (asynchronously)
     * Lists all the roles defined on the resource.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listResourceRolesAsync(String projId, String envId, String resourceId, Integer page, Integer perPage, final ApiCallback<List<ResourceRoleRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listResourceRolesValidateBeforeCall(projId, envId, resourceId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<ResourceRoleRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeParentResourceRole
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;). (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParentResourceRoleCall(String projId, String envId, String resourceId, String roleId, String parentRoleId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/parents/{parent_role_id}"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", localVarApiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()))
            .replaceAll("\\{" + "parent_role_id" + "\\}", localVarApiClient.escapeString(parentRoleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeParentResourceRoleValidateBeforeCall(String projId, String envId, String resourceId, String roleId, String parentRoleId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling removeParentResourceRole(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling removeParentResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling removeParentResourceRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removeParentResourceRole(Async)");
        }
        
        // verify the required parameter 'parentRoleId' is set
        if (parentRoleId == null) {
            throw new ApiException("Missing the required parameter 'parentRoleId' when calling removeParentResourceRole(Async)");
        }
        

        okhttp3.Call localVarCall = removeParentResourceRoleCall(projId, envId, resourceId, roleId, parentRoleId, _callback);
        return localVarCall;

    }

    /**
     * Remove Parent Role
     * This endpoint is part of the role hierarchy feature.  Removes &#x60;parent_role_id&#x60; from the list of parent roles of role with id &#x60;role_id&#x60;. In other words, &#x60;role_id&#x60; will no longer be automatically assigned permissions that are granted to &#x60;parent_role_id&#x60;.  We can say the &#x60;role_id&#x60; **not longer extends** &#x60;parent_role_id&#x60; or **no longer inherits** from &#x60;parent_role_id&#x60;.  Both roles must be defined on the same resource, identified by id &#x60;resource_id&#x60;.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;). (required)
     * @return ResourceRoleRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRoleRead removeParentResourceRole(String projId, String envId, String resourceId, String roleId, String parentRoleId) throws ApiException {
        ApiResponse<ResourceRoleRead> localVarResp = removeParentResourceRoleWithHttpInfo(projId, envId, resourceId, roleId, parentRoleId);
        return localVarResp.getData();
    }

    /**
     * Remove Parent Role
     * This endpoint is part of the role hierarchy feature.  Removes &#x60;parent_role_id&#x60; from the list of parent roles of role with id &#x60;role_id&#x60;. In other words, &#x60;role_id&#x60; will no longer be automatically assigned permissions that are granted to &#x60;parent_role_id&#x60;.  We can say the &#x60;role_id&#x60; **not longer extends** &#x60;parent_role_id&#x60; or **no longer inherits** from &#x60;parent_role_id&#x60;.  Both roles must be defined on the same resource, identified by id &#x60;resource_id&#x60;.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;). (required)
     * @return ApiResponse&lt;ResourceRoleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRoleRead> removeParentResourceRoleWithHttpInfo(String projId, String envId, String resourceId, String roleId, String parentRoleId) throws ApiException {
        okhttp3.Call localVarCall = removeParentResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, parentRoleId, null);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Parent Role (asynchronously)
     * This endpoint is part of the role hierarchy feature.  Removes &#x60;parent_role_id&#x60; from the list of parent roles of role with id &#x60;role_id&#x60;. In other words, &#x60;role_id&#x60; will no longer be automatically assigned permissions that are granted to &#x60;parent_role_id&#x60;.  We can say the &#x60;role_id&#x60; **not longer extends** &#x60;parent_role_id&#x60; or **no longer inherits** from &#x60;parent_role_id&#x60;.  Both roles must be defined on the same resource, identified by id &#x60;resource_id&#x60;.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param parentRoleId Either the unique id of the parent role, or the URL-friendly key of the parent role (i.e: the \&quot;slug\&quot;). (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeParentResourceRoleAsync(String projId, String envId, String resourceId, String roleId, String parentRoleId, final ApiCallback<ResourceRoleRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeParentResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, parentRoleId, _callback);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removePermissionsFromResourceRole
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param removeRolePermissions  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePermissionsFromResourceRoleCall(String projId, String envId, String resourceId, String roleId, RemoveRolePermissions removeRolePermissions, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = removeRolePermissions;

        // create path and map variables
        String localVarPath = "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}/permissions"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", localVarApiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removePermissionsFromResourceRoleValidateBeforeCall(String projId, String envId, String resourceId, String roleId, RemoveRolePermissions removeRolePermissions, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling removePermissionsFromResourceRole(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling removePermissionsFromResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling removePermissionsFromResourceRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling removePermissionsFromResourceRole(Async)");
        }
        
        // verify the required parameter 'removeRolePermissions' is set
        if (removeRolePermissions == null) {
            throw new ApiException("Missing the required parameter 'removeRolePermissions' when calling removePermissionsFromResourceRole(Async)");
        }
        

        okhttp3.Call localVarCall = removePermissionsFromResourceRoleCall(projId, envId, resourceId, roleId, removeRolePermissions, _callback);
        return localVarCall;

    }

    /**
     * Remove Permissions from Role
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param removeRolePermissions  (required)
     * @return ResourceRoleRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRoleRead removePermissionsFromResourceRole(String projId, String envId, String resourceId, String roleId, RemoveRolePermissions removeRolePermissions) throws ApiException {
        ApiResponse<ResourceRoleRead> localVarResp = removePermissionsFromResourceRoleWithHttpInfo(projId, envId, resourceId, roleId, removeRolePermissions);
        return localVarResp.getData();
    }

    /**
     * Remove Permissions from Role
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param removeRolePermissions  (required)
     * @return ApiResponse&lt;ResourceRoleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRoleRead> removePermissionsFromResourceRoleWithHttpInfo(String projId, String envId, String resourceId, String roleId, RemoveRolePermissions removeRolePermissions) throws ApiException {
        okhttp3.Call localVarCall = removePermissionsFromResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, removeRolePermissions, null);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove Permissions from Role (asynchronously)
     * Remove permissions from role.  If some of the permissions specified are already unassigned, will skip them.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param removeRolePermissions  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removePermissionsFromResourceRoleAsync(String projId, String envId, String resourceId, String roleId, RemoveRolePermissions removeRolePermissions, final ApiCallback<ResourceRoleRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = removePermissionsFromResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, removeRolePermissions, _callback);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateResourceRole
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceRoleUpdate  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceRoleCall(String projId, String envId, String resourceId, String roleId, ResourceRoleUpdate resourceRoleUpdate, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = resourceRoleUpdate;

        // create path and map variables
        String localVarPath = "/v2/schema/{proj_id}/{env_id}/resources/{resource_id}/roles/{role_id}"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "resource_id" + "\\}", localVarApiClient.escapeString(resourceId.toString()))
            .replaceAll("\\{" + "role_id" + "\\}", localVarApiClient.escapeString(roleId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateResourceRoleValidateBeforeCall(String projId, String envId, String resourceId, String roleId, ResourceRoleUpdate resourceRoleUpdate, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling updateResourceRole(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling updateResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceId' is set
        if (resourceId == null) {
            throw new ApiException("Missing the required parameter 'resourceId' when calling updateResourceRole(Async)");
        }
        
        // verify the required parameter 'roleId' is set
        if (roleId == null) {
            throw new ApiException("Missing the required parameter 'roleId' when calling updateResourceRole(Async)");
        }
        
        // verify the required parameter 'resourceRoleUpdate' is set
        if (resourceRoleUpdate == null) {
            throw new ApiException("Missing the required parameter 'resourceRoleUpdate' when calling updateResourceRole(Async)");
        }
        

        okhttp3.Call localVarCall = updateResourceRoleCall(projId, envId, resourceId, roleId, resourceRoleUpdate, _callback);
        return localVarCall;

    }

    /**
     * Update Resource Role
     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceRoleUpdate  (required)
     * @return ResourceRoleRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ResourceRoleRead updateResourceRole(String projId, String envId, String resourceId, String roleId, ResourceRoleUpdate resourceRoleUpdate) throws ApiException {
        ApiResponse<ResourceRoleRead> localVarResp = updateResourceRoleWithHttpInfo(projId, envId, resourceId, roleId, resourceRoleUpdate);
        return localVarResp.getData();
    }

    /**
     * Update Resource Role
     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceRoleUpdate  (required)
     * @return ApiResponse&lt;ResourceRoleRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<ResourceRoleRead> updateResourceRoleWithHttpInfo(String projId, String envId, String resourceId, String roleId, ResourceRoleUpdate resourceRoleUpdate) throws ApiException {
        okhttp3.Call localVarCall = updateResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, resourceRoleUpdate, null);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Resource Role (asynchronously)
     * Partially updates the role defined on a resource. Fields that will be provided will be completely overwritten.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceId Either the unique id of the resource, or the URL-friendly key of the resource (i.e: the \&quot;slug\&quot;). (required)
     * @param roleId Either the unique id of the role, or the URL-friendly key of the role (i.e: the \&quot;slug\&quot;). (required)
     * @param resourceRoleUpdate  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateResourceRoleAsync(String projId, String envId, String resourceId, String roleId, ResourceRoleUpdate resourceRoleUpdate, final ApiCallback<ResourceRoleRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateResourceRoleValidateBeforeCall(projId, envId, resourceId, roleId, resourceRoleUpdate, _callback);
        Type localVarReturnType = new TypeToken<ResourceRoleRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
