/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.api;

import io.permit.sdk.openapi.ApiCallback;
import io.permit.sdk.openapi.ApiClient;
import io.permit.sdk.openapi.ApiException;
import io.permit.sdk.openapi.ApiResponse;
import io.permit.sdk.openapi.Configuration;
import io.permit.sdk.openapi.Pair;
import io.permit.sdk.openapi.ProgressRequestBody;
import io.permit.sdk.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.permit.sdk.openapi.model.HTTPValidationError;
import io.permit.sdk.openapi.model.NewPDP;
import io.permit.sdk.openapi.model.PDP;
import io.permit.sdk.openapi.model.PDPConfigRead;
import io.permit.sdk.openapi.model.PDPList;
import io.permit.sdk.openapi.model.PermitBackendSchemasSchemaPDPsRemoteConfig;
import io.permit.sdk.openapi.model.PermitBackendV1CompatSchemasSdkRemoteConfig;
import java.util.UUID;
import io.permit.sdk.openapi.model.UpdatePDP;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PolicyDecisionPointsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PolicyDecisionPointsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public PolicyDecisionPointsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createPdp
     * @param newPDP  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createPdpCall(NewPDP newPDP, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newPDP;

        // create path and map variables
        String localVarPath = "/v1/pdps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createPdpValidateBeforeCall(NewPDP newPDP, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newPDP' is set
        if (newPDP == null) {
            throw new ApiException("Missing the required parameter 'newPDP' when calling createPdp(Async)");
        }
        

        okhttp3.Call localVarCall = createPdpCall(newPDP, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Create Policy Decision Point
     * 
     * @param newPDP  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return PDP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PDP createPdp(NewPDP newPDP, String xOrganizationId) throws ApiException {
        ApiResponse<PDP> localVarResp = createPdpWithHttpInfo(newPDP, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Create Policy Decision Point
     * 
     * @param newPDP  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;PDP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PDP> createPdpWithHttpInfo(NewPDP newPDP, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = createPdpValidateBeforeCall(newPDP, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<PDP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Policy Decision Point (asynchronously)
     * 
     * @param newPDP  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createPdpAsync(NewPDP newPDP, String xOrganizationId, final ApiCallback<PDP> _callback) throws ApiException {

        okhttp3.Call localVarCall = createPdpValidateBeforeCall(newPDP, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<PDP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deletePdp
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deletePdpCall(UUID pdpId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pdps/{pdp_id}"
            .replaceAll("\\{" + "pdp_id" + "\\}", localVarApiClient.escapeString(pdpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deletePdpValidateBeforeCall(UUID pdpId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdpId' is set
        if (pdpId == null) {
            throw new ApiException("Missing the required parameter 'pdpId' when calling deletePdp(Async)");
        }
        

        okhttp3.Call localVarCall = deletePdpCall(pdpId, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Delete Policy Decision Point
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deletePdp(UUID pdpId, String xOrganizationId) throws ApiException {
        deletePdpWithHttpInfo(pdpId, xOrganizationId);
    }

    /**
     * Delete Policy Decision Point
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deletePdpWithHttpInfo(UUID pdpId, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = deletePdpValidateBeforeCall(pdpId, xOrganizationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Policy Decision Point (asynchronously)
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deletePdpAsync(UUID pdpId, String xOrganizationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deletePdpValidateBeforeCall(pdpId, xOrganizationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAuthenticatingPdpConfigValues
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthenticatingPdpConfigValuesCall(final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/pdps/me/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAuthenticatingPdpConfigValuesValidateBeforeCall(final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getAuthenticatingPdpConfigValuesCall(_callback);
        return localVarCall;

    }

    /**
     * Get connected PDP configuration
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
     * @return PermitBackendSchemasSchemaPDPsRemoteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public PermitBackendSchemasSchemaPDPsRemoteConfig getAuthenticatingPdpConfigValues() throws ApiException {
        ApiResponse<PermitBackendSchemasSchemaPDPsRemoteConfig> localVarResp = getAuthenticatingPdpConfigValuesWithHttpInfo();
        return localVarResp.getData();
    }

    /**
     * Get connected PDP configuration
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
     * @return ApiResponse&lt;PermitBackendSchemasSchemaPDPsRemoteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermitBackendSchemasSchemaPDPsRemoteConfig> getAuthenticatingPdpConfigValuesWithHttpInfo() throws ApiException {
        okhttp3.Call localVarCall = getAuthenticatingPdpConfigValuesValidateBeforeCall(null);
        Type localVarReturnType = new TypeToken<PermitBackendSchemasSchemaPDPsRemoteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get connected PDP configuration (asynchronously)
     * Gets the configuration values for the currently authenticated PDP container.  The PDP authenticates with an API key scoped to a given Permit.io environment. The system identifies the PDP via its API key and then returns all the configuration values required for the container to run correctly.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAuthenticatingPdpConfigValuesAsync(final ApiCallback<PermitBackendSchemasSchemaPDPsRemoteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAuthenticatingPdpConfigValuesValidateBeforeCall(_callback);
        Type localVarReturnType = new TypeToken<PermitBackendSchemasSchemaPDPsRemoteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getCurrentPdpConfig
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getCurrentPdpConfigCall(String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pdps/me/config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getCurrentPdpConfigValidateBeforeCall(String xOrganizationId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = getCurrentPdpConfigCall(xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Get Connected PDP Config
     * 
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return PermitBackendV1CompatSchemasSdkRemoteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PermitBackendV1CompatSchemasSdkRemoteConfig getCurrentPdpConfig(String xOrganizationId) throws ApiException {
        ApiResponse<PermitBackendV1CompatSchemasSdkRemoteConfig> localVarResp = getCurrentPdpConfigWithHttpInfo(xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Get Connected PDP Config
     * 
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;PermitBackendV1CompatSchemasSdkRemoteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PermitBackendV1CompatSchemasSdkRemoteConfig> getCurrentPdpConfigWithHttpInfo(String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = getCurrentPdpConfigValidateBeforeCall(xOrganizationId, null);
        Type localVarReturnType = new TypeToken<PermitBackendV1CompatSchemasSdkRemoteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Connected PDP Config (asynchronously)
     * 
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getCurrentPdpConfigAsync(String xOrganizationId, final ApiCallback<PermitBackendV1CompatSchemasSdkRemoteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getCurrentPdpConfigValidateBeforeCall(xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<PermitBackendV1CompatSchemasSdkRemoteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPdp
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPdpCall(UUID pdpId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pdps{pdp_id}"
            .replaceAll("\\{" + "pdp_id" + "\\}", localVarApiClient.escapeString(pdpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPdpValidateBeforeCall(UUID pdpId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdpId' is set
        if (pdpId == null) {
            throw new ApiException("Missing the required parameter 'pdpId' when calling getPdp(Async)");
        }
        

        okhttp3.Call localVarCall = getPdpCall(pdpId, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Get Policy Decision Point
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return PDP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PDP getPdp(UUID pdpId, String xOrganizationId) throws ApiException {
        ApiResponse<PDP> localVarResp = getPdpWithHttpInfo(pdpId, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Get Policy Decision Point
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;PDP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PDP> getPdpWithHttpInfo(UUID pdpId, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = getPdpValidateBeforeCall(pdpId, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<PDP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Policy Decision Point (asynchronously)
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPdpAsync(UUID pdpId, String xOrganizationId, final ApiCallback<PDP> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPdpValidateBeforeCall(pdpId, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<PDP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPdpConfig
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPdpConfigCall(UUID pdpId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pdps/{pdp_id}/config"
            .replaceAll("\\{" + "pdp_id" + "\\}", localVarApiClient.escapeString(pdpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPdpConfigValidateBeforeCall(UUID pdpId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdpId' is set
        if (pdpId == null) {
            throw new ApiException("Missing the required parameter 'pdpId' when calling getPdpConfig(Async)");
        }
        

        okhttp3.Call localVarCall = getPdpConfigCall(pdpId, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Get PDP Config
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return PermitBackendV1CompatSchemasSdkRemoteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PermitBackendV1CompatSchemasSdkRemoteConfig getPdpConfig(UUID pdpId, String xOrganizationId) throws ApiException {
        ApiResponse<PermitBackendV1CompatSchemasSdkRemoteConfig> localVarResp = getPdpConfigWithHttpInfo(pdpId, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Get PDP Config
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;PermitBackendV1CompatSchemasSdkRemoteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PermitBackendV1CompatSchemasSdkRemoteConfig> getPdpConfigWithHttpInfo(UUID pdpId, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = getPdpConfigValidateBeforeCall(pdpId, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<PermitBackendV1CompatSchemasSdkRemoteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get PDP Config (asynchronously)
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getPdpConfigAsync(UUID pdpId, String xOrganizationId, final ApiCallback<PermitBackendV1CompatSchemasSdkRemoteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPdpConfigValidateBeforeCall(pdpId, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<PermitBackendV1CompatSchemasSdkRemoteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getPdpConfigValues
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPdpConfigValuesCall(String projId, String envId, UUID pdpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/values"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "pdp_id" + "\\}", localVarApiClient.escapeString(pdpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPdpConfigValuesValidateBeforeCall(String projId, String envId, UUID pdpId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling getPdpConfigValues(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling getPdpConfigValues(Async)");
        }
        
        // verify the required parameter 'pdpId' is set
        if (pdpId == null) {
            throw new ApiException("Missing the required parameter 'pdpId' when calling getPdpConfigValues(Async)");
        }
        

        okhttp3.Call localVarCall = getPdpConfigValuesCall(projId, envId, pdpId, _callback);
        return localVarCall;

    }

    /**
     * Get PDP configuration
     * Gets the configuration values for the PDP container with id &#x60;pdp_id&#x60;.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @return PermitBackendSchemasSchemaPDPsRemoteConfig
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public PermitBackendSchemasSchemaPDPsRemoteConfig getPdpConfigValues(String projId, String envId, UUID pdpId) throws ApiException {
        ApiResponse<PermitBackendSchemasSchemaPDPsRemoteConfig> localVarResp = getPdpConfigValuesWithHttpInfo(projId, envId, pdpId);
        return localVarResp.getData();
    }

    /**
     * Get PDP configuration
     * Gets the configuration values for the PDP container with id &#x60;pdp_id&#x60;.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @return ApiResponse&lt;PermitBackendSchemasSchemaPDPsRemoteConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PermitBackendSchemasSchemaPDPsRemoteConfig> getPdpConfigValuesWithHttpInfo(String projId, String envId, UUID pdpId) throws ApiException {
        okhttp3.Call localVarCall = getPdpConfigValuesValidateBeforeCall(projId, envId, pdpId, null);
        Type localVarReturnType = new TypeToken<PermitBackendSchemasSchemaPDPsRemoteConfig>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get PDP configuration (asynchronously)
     * Gets the configuration values for the PDP container with id &#x60;pdp_id&#x60;.  The config values returned are considered \&quot;overrides\&quot;, meaning they are overriding any default values given to the container by the user.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getPdpConfigValuesAsync(String projId, String envId, UUID pdpId, final ApiCallback<PermitBackendSchemasSchemaPDPsRemoteConfig> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPdpConfigValuesValidateBeforeCall(projId, envId, pdpId, _callback);
        Type localVarReturnType = new TypeToken<PermitBackendSchemasSchemaPDPsRemoteConfig>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPdpConfigs
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPdpConfigsCall(String projId, String envId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/pdps/{proj_id}/{env_id}/configs"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPdpConfigsValidateBeforeCall(String projId, String envId, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling listPdpConfigs(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling listPdpConfigs(Async)");
        }
        

        okhttp3.Call localVarCall = listPdpConfigsCall(projId, envId, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * List PDP configurations
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return List&lt;PDPConfigRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public List<PDPConfigRead> listPdpConfigs(String projId, String envId, Integer page, Integer perPage) throws ApiException {
        ApiResponse<List<PDPConfigRead>> localVarResp = listPdpConfigsWithHttpInfo(projId, envId, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List PDP configurations
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;List&lt;PDPConfigRead&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<PDPConfigRead>> listPdpConfigsWithHttpInfo(String projId, String envId, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listPdpConfigsValidateBeforeCall(projId, envId, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<PDPConfigRead>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List PDP configurations (asynchronously)
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPdpConfigsAsync(String projId, String envId, Integer page, Integer perPage, final ApiCallback<List<PDPConfigRead>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPdpConfigsValidateBeforeCall(projId, envId, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<PDPConfigRead>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listPdps
     * @param environment filter only objects belonging to this environment (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPdpsCall(UUID environment, Integer skip, Integer limit, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pdps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (environment != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("environment", environment));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPdpsValidateBeforeCall(UUID environment, Integer skip, Integer limit, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listPdpsCall(environment, skip, limit, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * List Policy Decision Points
     * Get a list of PDPs configured under this organization/environment.
     * @param environment filter only objects belonging to this environment (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return PDPList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PDPList listPdps(UUID environment, Integer skip, Integer limit, String xOrganizationId) throws ApiException {
        ApiResponse<PDPList> localVarResp = listPdpsWithHttpInfo(environment, skip, limit, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * List Policy Decision Points
     * Get a list of PDPs configured under this organization/environment.
     * @param environment filter only objects belonging to this environment (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;PDPList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PDPList> listPdpsWithHttpInfo(UUID environment, Integer skip, Integer limit, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = listPdpsValidateBeforeCall(environment, skip, limit, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<PDPList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Policy Decision Points (asynchronously)
     * Get a list of PDPs configured under this organization/environment.
     * @param environment filter only objects belonging to this environment (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listPdpsAsync(UUID environment, Integer skip, Integer limit, String xOrganizationId, final ApiCallback<PDPList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPdpsValidateBeforeCall(environment, skip, limit, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<PDPList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatePdpApiKey
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatePdpApiKeyCall(String projId, String envId, UUID pdpId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/pdps/{proj_id}/{env_id}/configs/{pdp_id}/rotate-api-key"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "pdp_id" + "\\}", localVarApiClient.escapeString(pdpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatePdpApiKeyValidateBeforeCall(String projId, String envId, UUID pdpId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling rotatePdpApiKey(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling rotatePdpApiKey(Async)");
        }
        
        // verify the required parameter 'pdpId' is set
        if (pdpId == null) {
            throw new ApiException("Missing the required parameter 'pdpId' when calling rotatePdpApiKey(Async)");
        }
        

        okhttp3.Call localVarCall = rotatePdpApiKeyCall(projId, envId, pdpId, _callback);
        return localVarCall;

    }

    /**
     * Rotate PDP API Key
     * Rotates the API key of the PDP container with id &#x60;pdp_id&#x60;.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @return PDPConfigRead
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public PDPConfigRead rotatePdpApiKey(String projId, String envId, UUID pdpId) throws ApiException {
        ApiResponse<PDPConfigRead> localVarResp = rotatePdpApiKeyWithHttpInfo(projId, envId, pdpId);
        return localVarResp.getData();
    }

    /**
     * Rotate PDP API Key
     * Rotates the API key of the PDP container with id &#x60;pdp_id&#x60;.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @return ApiResponse&lt;PDPConfigRead&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PDPConfigRead> rotatePdpApiKeyWithHttpInfo(String projId, String envId, UUID pdpId) throws ApiException {
        okhttp3.Call localVarCall = rotatePdpApiKeyValidateBeforeCall(projId, envId, pdpId, null);
        Type localVarReturnType = new TypeToken<PDPConfigRead>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotate PDP API Key (asynchronously)
     * Rotates the API key of the PDP container with id &#x60;pdp_id&#x60;.  The rotation of the API key revokes the old API key and issues a new API key to the PDP.
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call rotatePdpApiKeyAsync(String projId, String envId, UUID pdpId, final ApiCallback<PDPConfigRead> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatePdpApiKeyValidateBeforeCall(projId, envId, pdpId, _callback);
        Type localVarReturnType = new TypeToken<PDPConfigRead>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for rotatePdpSecret
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rotatePdpSecretCall(UUID pdpId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pdps/{pdp_id}/rotate-secret"
            .replaceAll("\\{" + "pdp_id" + "\\}", localVarApiClient.escapeString(pdpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call rotatePdpSecretValidateBeforeCall(UUID pdpId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdpId' is set
        if (pdpId == null) {
            throw new ApiException("Missing the required parameter 'pdpId' when calling rotatePdpSecret(Async)");
        }
        

        okhttp3.Call localVarCall = rotatePdpSecretCall(pdpId, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Rotate PDP Secret
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return PDP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PDP rotatePdpSecret(UUID pdpId, String xOrganizationId) throws ApiException {
        ApiResponse<PDP> localVarResp = rotatePdpSecretWithHttpInfo(pdpId, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Rotate PDP Secret
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;PDP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PDP> rotatePdpSecretWithHttpInfo(UUID pdpId, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = rotatePdpSecretValidateBeforeCall(pdpId, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<PDP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rotate PDP Secret (asynchronously)
     * 
     * @param pdpId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call rotatePdpSecretAsync(UUID pdpId, String xOrganizationId, final ApiCallback<PDP> _callback) throws ApiException {

        okhttp3.Call localVarCall = rotatePdpSecretValidateBeforeCall(pdpId, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<PDP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updatePdp
     * @param pdpId  (required)
     * @param updatePDP  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updatePdpCall(UUID pdpId, UpdatePDP updatePDP, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updatePDP;

        // create path and map variables
        String localVarPath = "/v1/pdps/{pdp_id}"
            .replaceAll("\\{" + "pdp_id" + "\\}", localVarApiClient.escapeString(pdpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePdpValidateBeforeCall(UUID pdpId, UpdatePDP updatePDP, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdpId' is set
        if (pdpId == null) {
            throw new ApiException("Missing the required parameter 'pdpId' when calling updatePdp(Async)");
        }
        
        // verify the required parameter 'updatePDP' is set
        if (updatePDP == null) {
            throw new ApiException("Missing the required parameter 'updatePDP' when calling updatePdp(Async)");
        }
        

        okhttp3.Call localVarCall = updatePdpCall(pdpId, updatePDP, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Update Policy Decision Point
     * 
     * @param pdpId  (required)
     * @param updatePDP  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return PDP
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public PDP updatePdp(UUID pdpId, UpdatePDP updatePDP, String xOrganizationId) throws ApiException {
        ApiResponse<PDP> localVarResp = updatePdpWithHttpInfo(pdpId, updatePDP, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Update Policy Decision Point
     * 
     * @param pdpId  (required)
     * @param updatePDP  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;PDP&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<PDP> updatePdpWithHttpInfo(UUID pdpId, UpdatePDP updatePDP, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = updatePdpValidateBeforeCall(pdpId, updatePDP, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<PDP>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Policy Decision Point (asynchronously)
     * 
     * @param pdpId  (required)
     * @param updatePDP  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updatePdpAsync(UUID pdpId, UpdatePDP updatePDP, String xOrganizationId, final ApiCallback<PDP> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePdpValidateBeforeCall(pdpId, updatePDP, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<PDP>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
