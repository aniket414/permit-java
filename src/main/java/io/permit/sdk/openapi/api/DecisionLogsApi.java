/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.api;

import io.permit.sdk.openapi.ApiCallback;
import io.permit.sdk.openapi.ApiClient;
import io.permit.sdk.openapi.ApiException;
import io.permit.sdk.openapi.ApiResponse;
import io.permit.sdk.openapi.Configuration;
import io.permit.sdk.openapi.Pair;
import io.permit.sdk.openapi.ProgressRequestBody;
import io.permit.sdk.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.permit.sdk.openapi.model.HTTPValidationError;
import io.permit.sdk.openapi.model.PaginatedResultOPADecisionLog;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DecisionLogsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DecisionLogsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DecisionLogsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for listPdpDecisionLogs
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @param users List of user IDs to filter by (optional)
     * @param approved Filter by approved decisions (optional)
     * @param resources Filter by resources (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPdpDecisionLogsCall(String projId, String envId, UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v2/pdps/{proj_id}/{env_id}/decision-logs/{pdp_id}"
            .replaceAll("\\{" + "proj_id" + "\\}", localVarApiClient.escapeString(projId.toString()))
            .replaceAll("\\{" + "env_id" + "\\}", localVarApiClient.escapeString(envId.toString()))
            .replaceAll("\\{" + "pdp_id" + "\\}", localVarApiClient.escapeString(pdpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (users != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "users", users));
        }

        if (approved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approved", approved));
        }

        if (resources != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "resources", resources));
        }

        if (timestampFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp_from", timestampFrom));
        }

        if (timestampTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp_to", timestampTo));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "HTTPBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listPdpDecisionLogsValidateBeforeCall(String projId, String envId, UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'projId' is set
        if (projId == null) {
            throw new ApiException("Missing the required parameter 'projId' when calling listPdpDecisionLogs(Async)");
        }
        
        // verify the required parameter 'envId' is set
        if (envId == null) {
            throw new ApiException("Missing the required parameter 'envId' when calling listPdpDecisionLogs(Async)");
        }
        
        // verify the required parameter 'pdpId' is set
        if (pdpId == null) {
            throw new ApiException("Missing the required parameter 'pdpId' when calling listPdpDecisionLogs(Async)");
        }
        

        okhttp3.Call localVarCall = listPdpDecisionLogsCall(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, _callback);
        return localVarCall;

    }

    /**
     * List PDP Decisions
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @param users List of user IDs to filter by (optional)
     * @param approved Filter by approved decisions (optional)
     * @param resources Filter by resources (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return PaginatedResultOPADecisionLog
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public PaginatedResultOPADecisionLog listPdpDecisionLogs(String projId, String envId, UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer page, Integer perPage) throws ApiException {
        ApiResponse<PaginatedResultOPADecisionLog> localVarResp = listPdpDecisionLogsWithHttpInfo(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage);
        return localVarResp.getData();
    }

    /**
     * List PDP Decisions
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @param users List of user IDs to filter by (optional)
     * @param approved Filter by approved decisions (optional)
     * @param resources Filter by resources (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @return ApiResponse&lt;PaginatedResultOPADecisionLog&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<PaginatedResultOPADecisionLog> listPdpDecisionLogsWithHttpInfo(String projId, String envId, UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listPdpDecisionLogsValidateBeforeCall(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, null);
        Type localVarReturnType = new TypeToken<PaginatedResultOPADecisionLog>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List PDP Decisions (asynchronously)
     * 
     * @param projId Either the unique id of the project, or the URL-friendly key of the project (i.e: the \&quot;slug\&quot;). (required)
     * @param envId Either the unique id of the environment, or the URL-friendly key of the environment (i.e: the \&quot;slug\&quot;). (required)
     * @param pdpId The unique id of the pdp (required)
     * @param users List of user IDs to filter by (optional)
     * @param approved Filter by approved decisions (optional)
     * @param resources Filter by resources (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param page Page number of the results to fetch, starting at 1. (optional, default to 1)
     * @param perPage The number of results per page (max 100). (optional, default to 30)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listPdpDecisionLogsAsync(String projId, String envId, UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer page, Integer perPage, final ApiCallback<PaginatedResultOPADecisionLog> _callback) throws ApiException {

        okhttp3.Call localVarCall = listPdpDecisionLogsValidateBeforeCall(projId, envId, pdpId, users, approved, resources, timestampFrom, timestampTo, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<PaginatedResultOPADecisionLog>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
