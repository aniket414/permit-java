/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.api;

import io.permit.sdk.openapi.ApiCallback;
import io.permit.sdk.openapi.ApiClient;
import io.permit.sdk.openapi.ApiException;
import io.permit.sdk.openapi.ApiResponse;
import io.permit.sdk.openapi.Configuration;
import io.permit.sdk.openapi.Pair;
import io.permit.sdk.openapi.ProgressRequestBody;
import io.permit.sdk.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.permit.sdk.openapi.model.DecisionLogResponseList;
import io.permit.sdk.openapi.model.HTTPValidationError;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1PdpDecisionsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1PdpDecisionsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1PdpDecisionsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for getDecisionLogs
     * @param pdpId  (required)
     * @param users List of user IDs to filter by (optional)
     * @param approved Filter by approved decisions (optional)
     * @param resources Filter by resources (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getDecisionLogsCall(UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer skip, Integer limit, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/pdps/{pdp_id}/decision_logs"
            .replaceAll("\\{" + "pdp_id" + "\\}", localVarApiClient.escapeString(pdpId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (users != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "users", users));
        }

        if (approved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("approved", approved));
        }

        if (resources != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "resources", resources));
        }

        if (timestampFrom != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp_from", timestampFrom));
        }

        if (timestampTo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("timestamp_to", timestampTo));
        }

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDecisionLogsValidateBeforeCall(UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer skip, Integer limit, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'pdpId' is set
        if (pdpId == null) {
            throw new ApiException("Missing the required parameter 'pdpId' when calling getDecisionLogs(Async)");
        }
        

        okhttp3.Call localVarCall = getDecisionLogsCall(pdpId, users, approved, resources, timestampFrom, timestampTo, skip, limit, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * List PDP Decisions
     * 
     * @param pdpId  (required)
     * @param users List of user IDs to filter by (optional)
     * @param approved Filter by approved decisions (optional)
     * @param resources Filter by resources (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return DecisionLogResponseList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public DecisionLogResponseList getDecisionLogs(UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer skip, Integer limit, String xOrganizationId) throws ApiException {
        ApiResponse<DecisionLogResponseList> localVarResp = getDecisionLogsWithHttpInfo(pdpId, users, approved, resources, timestampFrom, timestampTo, skip, limit, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * List PDP Decisions
     * 
     * @param pdpId  (required)
     * @param users List of user IDs to filter by (optional)
     * @param approved Filter by approved decisions (optional)
     * @param resources Filter by resources (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;DecisionLogResponseList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<DecisionLogResponseList> getDecisionLogsWithHttpInfo(UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer skip, Integer limit, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = getDecisionLogsValidateBeforeCall(pdpId, users, approved, resources, timestampFrom, timestampTo, skip, limit, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<DecisionLogResponseList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List PDP Decisions (asynchronously)
     * 
     * @param pdpId  (required)
     * @param users List of user IDs to filter by (optional)
     * @param approved Filter by approved decisions (optional)
     * @param resources Filter by resources (optional)
     * @param timestampFrom Filter by timestamp from (optional)
     * @param timestampTo Filter by timestamp to (optional)
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getDecisionLogsAsync(UUID pdpId, List<String> users, Boolean approved, List<String> resources, Integer timestampFrom, Integer timestampTo, Integer skip, Integer limit, String xOrganizationId, final ApiCallback<DecisionLogResponseList> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDecisionLogsValidateBeforeCall(pdpId, users, approved, resources, timestampFrom, timestampTo, skip, limit, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<DecisionLogResponseList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
