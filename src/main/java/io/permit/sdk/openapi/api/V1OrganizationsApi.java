/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.api;

import io.permit.sdk.openapi.ApiCallback;
import io.permit.sdk.openapi.ApiClient;
import io.permit.sdk.openapi.ApiException;
import io.permit.sdk.openapi.ApiResponse;
import io.permit.sdk.openapi.Configuration;
import io.permit.sdk.openapi.Pair;
import io.permit.sdk.openapi.ProgressRequestBody;
import io.permit.sdk.openapi.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.permit.sdk.openapi.model.HTTPValidationError;
import io.permit.sdk.openapi.model.NewOrganization;
import io.permit.sdk.openapi.model.Organization;
import io.permit.sdk.openapi.model.OrganizationList;
import io.permit.sdk.openapi.model.UpdateOrganization;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class V1OrganizationsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public V1OrganizationsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public V1OrganizationsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createOrganizationV1OrganizationsPost
     * @param newOrganization  (required)
     * @param populate Populate organization with default tenant and project (optional, default to true)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createOrganizationV1OrganizationsPostCall(NewOrganization newOrganization, Boolean populate, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newOrganization;

        // create path and map variables
        String localVarPath = "/v1/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (populate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("populate", populate));
        }

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call createOrganizationV1OrganizationsPostValidateBeforeCall(NewOrganization newOrganization, Boolean populate, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'newOrganization' is set
        if (newOrganization == null) {
            throw new ApiException("Missing the required parameter 'newOrganization' when calling createOrganizationV1OrganizationsPost(Async)");
        }
        

        okhttp3.Call localVarCall = createOrganizationV1OrganizationsPostCall(newOrganization, populate, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Create Organization
     * 
     * @param newOrganization  (required)
     * @param populate Populate organization with default tenant and project (optional, default to true)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Organization createOrganizationV1OrganizationsPost(NewOrganization newOrganization, Boolean populate, String xOrganizationId) throws ApiException {
        ApiResponse<Organization> localVarResp = createOrganizationV1OrganizationsPostWithHttpInfo(newOrganization, populate, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Create Organization
     * 
     * @param newOrganization  (required)
     * @param populate Populate organization with default tenant and project (optional, default to true)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Organization> createOrganizationV1OrganizationsPostWithHttpInfo(NewOrganization newOrganization, Boolean populate, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = createOrganizationV1OrganizationsPostValidateBeforeCall(newOrganization, populate, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Organization (asynchronously)
     * 
     * @param newOrganization  (required)
     * @param populate Populate organization with default tenant and project (optional, default to true)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call createOrganizationV1OrganizationsPostAsync(NewOrganization newOrganization, Boolean populate, String xOrganizationId, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = createOrganizationV1OrganizationsPostValidateBeforeCall(newOrganization, populate, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteOrganizationV1OrganizationsOrganizationIdDelete
     * @param organizationId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteOrganizationV1OrganizationsOrganizationIdDeleteCall(String organizationId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/organizations/{organization_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteOrganizationV1OrganizationsOrganizationIdDeleteValidateBeforeCall(String organizationId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling deleteOrganizationV1OrganizationsOrganizationIdDelete(Async)");
        }
        

        okhttp3.Call localVarCall = deleteOrganizationV1OrganizationsOrganizationIdDeleteCall(organizationId, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Delete Organization
     * 
     * @param organizationId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public void deleteOrganizationV1OrganizationsOrganizationIdDelete(String organizationId, String xOrganizationId) throws ApiException {
        deleteOrganizationV1OrganizationsOrganizationIdDeleteWithHttpInfo(organizationId, xOrganizationId);
    }

    /**
     * Delete Organization
     * 
     * @param organizationId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Void> deleteOrganizationV1OrganizationsOrganizationIdDeleteWithHttpInfo(String organizationId, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = deleteOrganizationV1OrganizationsOrganizationIdDeleteValidateBeforeCall(organizationId, xOrganizationId, null);
        return localVarApiClient.execute(localVarCall);
    }

    /**
     * Delete Organization (asynchronously)
     * 
     * @param organizationId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call deleteOrganizationV1OrganizationsOrganizationIdDeleteAsync(String organizationId, String xOrganizationId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteOrganizationV1OrganizationsOrganizationIdDeleteValidateBeforeCall(organizationId, xOrganizationId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }
    /**
     * Build call for getOrganizationV1OrganizationsOrganizationIdGet
     * @param organizationId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getOrganizationV1OrganizationsOrganizationIdGetCall(String organizationId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/organizations/{organization_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call getOrganizationV1OrganizationsOrganizationIdGetValidateBeforeCall(String organizationId, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling getOrganizationV1OrganizationsOrganizationIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = getOrganizationV1OrganizationsOrganizationIdGetCall(organizationId, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Get Organization
     * 
     * @param organizationId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Organization getOrganizationV1OrganizationsOrganizationIdGet(String organizationId, String xOrganizationId) throws ApiException {
        ApiResponse<Organization> localVarResp = getOrganizationV1OrganizationsOrganizationIdGetWithHttpInfo(organizationId, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Get Organization
     * 
     * @param organizationId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Organization> getOrganizationV1OrganizationsOrganizationIdGetWithHttpInfo(String organizationId, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = getOrganizationV1OrganizationsOrganizationIdGetValidateBeforeCall(organizationId, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get Organization (asynchronously)
     * 
     * @param organizationId  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call getOrganizationV1OrganizationsOrganizationIdGetAsync(String organizationId, String xOrganizationId, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = getOrganizationV1OrganizationsOrganizationIdGetValidateBeforeCall(organizationId, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listOrganizationsV1OrganizationsGet
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listOrganizationsV1OrganizationsGetCall(Integer skip, Integer limit, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/organizations";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (skip != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("skip", skip));
        }

        if (limit != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("limit", limit));
        }

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call listOrganizationsV1OrganizationsGetValidateBeforeCall(Integer skip, Integer limit, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listOrganizationsV1OrganizationsGetCall(skip, limit, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * List Organizations
     * 
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return OrganizationList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public OrganizationList listOrganizationsV1OrganizationsGet(Integer skip, Integer limit, String xOrganizationId) throws ApiException {
        ApiResponse<OrganizationList> localVarResp = listOrganizationsV1OrganizationsGetWithHttpInfo(skip, limit, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * List Organizations
     * 
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;OrganizationList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<OrganizationList> listOrganizationsV1OrganizationsGetWithHttpInfo(Integer skip, Integer limit, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = listOrganizationsV1OrganizationsGetValidateBeforeCall(skip, limit, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<OrganizationList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Organizations (asynchronously)
     * 
     * @param skip Skip first n results (optional, default to 0)
     * @param limit Limit to n results (optional, default to 100)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call listOrganizationsV1OrganizationsGetAsync(Integer skip, Integer limit, String xOrganizationId, final ApiCallback<OrganizationList> _callback) throws ApiException {

        okhttp3.Call localVarCall = listOrganizationsV1OrganizationsGetValidateBeforeCall(skip, limit, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<OrganizationList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateOrganizationV1OrganizationsOrganizationIdPatch
     * @param organizationId  (required)
     * @param updateOrganization  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateOrganizationV1OrganizationsOrganizationIdPatchCall(String organizationId, UpdateOrganization updateOrganization, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = updateOrganization;

        // create path and map variables
        String localVarPath = "/v1/organizations/{organization_id}"
            .replaceAll("\\{" + "organization_id" + "\\}", localVarApiClient.escapeString(organizationId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xOrganizationId != null) {
            localVarHeaderParams.put("x-organization-id", localVarApiClient.parameterToString(xOrganizationId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OAuth2PasswordBearer" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @Deprecated
    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrganizationV1OrganizationsOrganizationIdPatchValidateBeforeCall(String organizationId, UpdateOrganization updateOrganization, String xOrganizationId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'organizationId' is set
        if (organizationId == null) {
            throw new ApiException("Missing the required parameter 'organizationId' when calling updateOrganizationV1OrganizationsOrganizationIdPatch(Async)");
        }
        
        // verify the required parameter 'updateOrganization' is set
        if (updateOrganization == null) {
            throw new ApiException("Missing the required parameter 'updateOrganization' when calling updateOrganizationV1OrganizationsOrganizationIdPatch(Async)");
        }
        

        okhttp3.Call localVarCall = updateOrganizationV1OrganizationsOrganizationIdPatchCall(organizationId, updateOrganization, xOrganizationId, _callback);
        return localVarCall;

    }

    /**
     * Update Organization
     * 
     * @param organizationId  (required)
     * @param updateOrganization  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return Organization
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public Organization updateOrganizationV1OrganizationsOrganizationIdPatch(String organizationId, UpdateOrganization updateOrganization, String xOrganizationId) throws ApiException {
        ApiResponse<Organization> localVarResp = updateOrganizationV1OrganizationsOrganizationIdPatchWithHttpInfo(organizationId, updateOrganization, xOrganizationId);
        return localVarResp.getData();
    }

    /**
     * Update Organization
     * 
     * @param organizationId  (required)
     * @param updateOrganization  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @return ApiResponse&lt;Organization&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public ApiResponse<Organization> updateOrganizationV1OrganizationsOrganizationIdPatchWithHttpInfo(String organizationId, UpdateOrganization updateOrganization, String xOrganizationId) throws ApiException {
        okhttp3.Call localVarCall = updateOrganizationV1OrganizationsOrganizationIdPatchValidateBeforeCall(organizationId, updateOrganization, xOrganizationId, null);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update Organization (asynchronously)
     * 
     * @param organizationId  (required)
     * @param updateOrganization  (required)
     * @param xOrganizationId The id of the active organization you want to query on (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Successful Response </td><td>  -  </td></tr>
        <tr><td> 422 </td><td> Validation Error </td><td>  -  </td></tr>
     </table>
     * @deprecated
     */
    @Deprecated
    public okhttp3.Call updateOrganizationV1OrganizationsOrganizationIdPatchAsync(String organizationId, UpdateOrganization updateOrganization, String xOrganizationId, final ApiCallback<Organization> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrganizationV1OrganizationsOrganizationIdPatchValidateBeforeCall(organizationId, updateOrganization, xOrganizationId, _callback);
        Type localVarReturnType = new TypeToken<Organization>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
