/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.permit.sdk.openapi.model.APIKeyOwnerType;
import io.permit.sdk.openapi.model.MemberAccessLevel;
import io.permit.sdk.openapi.model.MemberAccessObj;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * APIKeyInfo
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class APIKeyInfo {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_ORG_ID = "org_id";
  @SerializedName(SERIALIZED_NAME_ORG_ID)
  private UUID orgId;

  public static final String SERIALIZED_NAME_PROJECT_ID = "project_id";
  @SerializedName(SERIALIZED_NAME_PROJECT_ID)
  private UUID projectId;

  public static final String SERIALIZED_NAME_ENV_ID = "env_id";
  @SerializedName(SERIALIZED_NAME_ENV_ID)
  private UUID envId;

  public static final String SERIALIZED_NAME_ACCESS_LEVEL = "access_level";
  @SerializedName(SERIALIZED_NAME_ACCESS_LEVEL)
  private MemberAccessLevel accessLevel;

  public static final String SERIALIZED_NAME_OBJECT_TYPE = "object_type";
  @SerializedName(SERIALIZED_NAME_OBJECT_TYPE)
  private MemberAccessObj objectType;

  public static final String SERIALIZED_NAME_OWNER_TYPE = "owner_type";
  @SerializedName(SERIALIZED_NAME_OWNER_TYPE)
  private APIKeyOwnerType ownerType;

  public APIKeyInfo() {
  }

  public APIKeyInfo id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public APIKeyInfo orgId(UUID orgId) {
    
    this.orgId = orgId;
    return this;
  }

   /**
   * Get orgId
   * @return orgId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getOrgId() {
    return orgId;
  }


  public void setOrgId(UUID orgId) {
    this.orgId = orgId;
  }


  public APIKeyInfo projectId(UUID projectId) {
    
    this.projectId = projectId;
    return this;
  }

   /**
   * Get projectId
   * @return projectId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getProjectId() {
    return projectId;
  }


  public void setProjectId(UUID projectId) {
    this.projectId = projectId;
  }


  public APIKeyInfo envId(UUID envId) {
    
    this.envId = envId;
    return this;
  }

   /**
   * Get envId
   * @return envId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UUID getEnvId() {
    return envId;
  }


  public void setEnvId(UUID envId) {
    this.envId = envId;
  }


  public APIKeyInfo accessLevel(MemberAccessLevel accessLevel) {
    
    this.accessLevel = accessLevel;
    return this;
  }

   /**
   * Get accessLevel
   * @return accessLevel
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public MemberAccessLevel getAccessLevel() {
    return accessLevel;
  }


  public void setAccessLevel(MemberAccessLevel accessLevel) {
    this.accessLevel = accessLevel;
  }


  public APIKeyInfo objectType(MemberAccessObj objectType) {
    
    this.objectType = objectType;
    return this;
  }

   /**
   * Get objectType
   * @return objectType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public MemberAccessObj getObjectType() {
    return objectType;
  }


  public void setObjectType(MemberAccessObj objectType) {
    this.objectType = objectType;
  }


  public APIKeyInfo ownerType(APIKeyOwnerType ownerType) {
    
    this.ownerType = ownerType;
    return this;
  }

   /**
   * Get ownerType
   * @return ownerType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public APIKeyOwnerType getOwnerType() {
    return ownerType;
  }


  public void setOwnerType(APIKeyOwnerType ownerType) {
    this.ownerType = ownerType;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    APIKeyInfo apIKeyInfo = (APIKeyInfo) o;
    return Objects.equals(this.id, apIKeyInfo.id) &&
        Objects.equals(this.orgId, apIKeyInfo.orgId) &&
        Objects.equals(this.projectId, apIKeyInfo.projectId) &&
        Objects.equals(this.envId, apIKeyInfo.envId) &&
        Objects.equals(this.accessLevel, apIKeyInfo.accessLevel) &&
        Objects.equals(this.objectType, apIKeyInfo.objectType) &&
        Objects.equals(this.ownerType, apIKeyInfo.ownerType);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, orgId, projectId, envId, accessLevel, objectType, ownerType);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class APIKeyInfo {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    orgId: ").append(toIndentedString(orgId)).append("\n");
    sb.append("    projectId: ").append(toIndentedString(projectId)).append("\n");
    sb.append("    envId: ").append(toIndentedString(envId)).append("\n");
    sb.append("    accessLevel: ").append(toIndentedString(accessLevel)).append("\n");
    sb.append("    objectType: ").append(toIndentedString(objectType)).append("\n");
    sb.append("    ownerType: ").append(toIndentedString(ownerType)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("org_id");
    openapiFields.add("project_id");
    openapiFields.add("env_id");
    openapiFields.add("access_level");
    openapiFields.add("object_type");
    openapiFields.add("owner_type");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("org_id");
    openapiRequiredFields.add("access_level");
    openapiRequiredFields.add("object_type");
    openapiRequiredFields.add("owner_type");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to APIKeyInfo
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (APIKeyInfo.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in APIKeyInfo is not found in the empty JSON string", APIKeyInfo.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!APIKeyInfo.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `APIKeyInfo` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : APIKeyInfo.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("org_id") != null && !jsonObj.get("org_id").isJsonNull()) && !jsonObj.get("org_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `org_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("org_id").toString()));
      }
      if ((jsonObj.get("project_id") != null && !jsonObj.get("project_id").isJsonNull()) && !jsonObj.get("project_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project_id").toString()));
      }
      if ((jsonObj.get("env_id") != null && !jsonObj.get("env_id").isJsonNull()) && !jsonObj.get("env_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `env_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("env_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!APIKeyInfo.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'APIKeyInfo' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<APIKeyInfo> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(APIKeyInfo.class));

       return (TypeAdapter<T>) new TypeAdapter<APIKeyInfo>() {
           @Override
           public void write(JsonWriter out, APIKeyInfo value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public APIKeyInfo read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of APIKeyInfo given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of APIKeyInfo
  * @throws IOException if the JSON string is invalid with respect to APIKeyInfo
  */
  public static APIKeyInfo fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, APIKeyInfo.class);
  }

 /**
  * Convert an instance of APIKeyInfo to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

