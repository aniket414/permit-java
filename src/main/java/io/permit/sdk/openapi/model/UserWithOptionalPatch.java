/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.permit.sdk.openapi.model.JSONPatchAction;
import io.permit.sdk.openapi.model.UserRoles;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * these fields should not be editable once the object is created in db
 */
@ApiModel(description = "these fields should not be editable once the object is created in db")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class UserWithOptionalPatch {
  public static final String SERIALIZED_NAME_CUSTOM_ID = "customId";
  @SerializedName(SERIALIZED_NAME_CUSTOM_ID)
  private String customId;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_FIRST_NAME = "firstName";
  @SerializedName(SERIALIZED_NAME_FIRST_NAME)
  private String firstName;

  public static final String SERIALIZED_NAME_LAST_NAME = "lastName";
  @SerializedName(SERIALIZED_NAME_LAST_NAME)
  private String lastName;

  public static final String SERIALIZED_NAME_ATTRIBUTES = "attributes";
  @SerializedName(SERIALIZED_NAME_ATTRIBUTES)
  private Object attributes;

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Object settings;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_CREATED_AT = "createdAt";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updatedAt";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private OffsetDateTime updatedAt;

  public static final String SERIALIZED_NAME_ORGANIZATION_ID = "organizationId";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_ID)
  private UUID organizationId;

  public static final String SERIALIZED_NAME_TENANT_IDS = "tenantIds";
  @SerializedName(SERIALIZED_NAME_TENANT_IDS)
  private List<UUID> tenantIds = new ArrayList<>();

  public static final String SERIALIZED_NAME_ENVIRONMENT_ID = "environmentId";
  @SerializedName(SERIALIZED_NAME_ENVIRONMENT_ID)
  private UUID environmentId;

  public static final String SERIALIZED_NAME_USER_ROLES = "userRoles";
  @SerializedName(SERIALIZED_NAME_USER_ROLES)
  private UserRoles userRoles;

  public static final String SERIALIZED_NAME_PATCH = "patch";
  @SerializedName(SERIALIZED_NAME_PATCH)
  private List<JSONPatchAction> patch = null;

  public UserWithOptionalPatch() {
  }

  public UserWithOptionalPatch customId(String customId) {
    
    this.customId = customId;
    return this;
  }

   /**
   * Get customId
   * @return customId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCustomId() {
    return customId;
  }


  public void setCustomId(String customId) {
    this.customId = customId;
  }


  public UserWithOptionalPatch email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Get email
   * @return email
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public UserWithOptionalPatch firstName(String firstName) {
    
    this.firstName = firstName;
    return this;
  }

   /**
   * Get firstName
   * @return firstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFirstName() {
    return firstName;
  }


  public void setFirstName(String firstName) {
    this.firstName = firstName;
  }


  public UserWithOptionalPatch lastName(String lastName) {
    
    this.lastName = lastName;
    return this;
  }

   /**
   * Get lastName
   * @return lastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastName() {
    return lastName;
  }


  public void setLastName(String lastName) {
    this.lastName = lastName;
  }


  public UserWithOptionalPatch attributes(Object attributes) {
    
    this.attributes = attributes;
    return this;
  }

   /**
   * Get attributes
   * @return attributes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getAttributes() {
    return attributes;
  }


  public void setAttributes(Object attributes) {
    this.attributes = attributes;
  }


  public UserWithOptionalPatch settings(Object settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * Get settings
   * @return settings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getSettings() {
    return settings;
  }


  public void setSettings(Object settings) {
    this.settings = settings;
  }


  public UserWithOptionalPatch id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public UserWithOptionalPatch createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Get createdAt
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public UserWithOptionalPatch updatedAt(OffsetDateTime updatedAt) {
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * Get updatedAt
   * @return updatedAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(OffsetDateTime updatedAt) {
    this.updatedAt = updatedAt;
  }


  public UserWithOptionalPatch organizationId(UUID organizationId) {
    
    this.organizationId = organizationId;
    return this;
  }

   /**
   * Get organizationId
   * @return organizationId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getOrganizationId() {
    return organizationId;
  }


  public void setOrganizationId(UUID organizationId) {
    this.organizationId = organizationId;
  }


  public UserWithOptionalPatch tenantIds(List<UUID> tenantIds) {
    
    this.tenantIds = tenantIds;
    return this;
  }

  public UserWithOptionalPatch addTenantIdsItem(UUID tenantIdsItem) {
    this.tenantIds.add(tenantIdsItem);
    return this;
  }

   /**
   * Get tenantIds
   * @return tenantIds
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<UUID> getTenantIds() {
    return tenantIds;
  }


  public void setTenantIds(List<UUID> tenantIds) {
    this.tenantIds = tenantIds;
  }


  public UserWithOptionalPatch environmentId(UUID environmentId) {
    
    this.environmentId = environmentId;
    return this;
  }

   /**
   * if not None, the user belongs to a single environment
   * @return environmentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "if not None, the user belongs to a single environment")

  public UUID getEnvironmentId() {
    return environmentId;
  }


  public void setEnvironmentId(UUID environmentId) {
    this.environmentId = environmentId;
  }


  public UserWithOptionalPatch userRoles(UserRoles userRoles) {
    
    this.userRoles = userRoles;
    return this;
  }

   /**
   * Get userRoles
   * @return userRoles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public UserRoles getUserRoles() {
    return userRoles;
  }


  public void setUserRoles(UserRoles userRoles) {
    this.userRoles = userRoles;
  }


  public UserWithOptionalPatch patch(List<JSONPatchAction> patch) {
    
    this.patch = patch;
    return this;
  }

  public UserWithOptionalPatch addPatchItem(JSONPatchAction patchItem) {
    if (this.patch == null) {
      this.patch = new ArrayList<>();
    }
    this.patch.add(patchItem);
    return this;
  }

   /**
   * Get patch
   * @return patch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<JSONPatchAction> getPatch() {
    return patch;
  }


  public void setPatch(List<JSONPatchAction> patch) {
    this.patch = patch;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UserWithOptionalPatch userWithOptionalPatch = (UserWithOptionalPatch) o;
    return Objects.equals(this.customId, userWithOptionalPatch.customId) &&
        Objects.equals(this.email, userWithOptionalPatch.email) &&
        Objects.equals(this.firstName, userWithOptionalPatch.firstName) &&
        Objects.equals(this.lastName, userWithOptionalPatch.lastName) &&
        Objects.equals(this.attributes, userWithOptionalPatch.attributes) &&
        Objects.equals(this.settings, userWithOptionalPatch.settings) &&
        Objects.equals(this.id, userWithOptionalPatch.id) &&
        Objects.equals(this.createdAt, userWithOptionalPatch.createdAt) &&
        Objects.equals(this.updatedAt, userWithOptionalPatch.updatedAt) &&
        Objects.equals(this.organizationId, userWithOptionalPatch.organizationId) &&
        Objects.equals(this.tenantIds, userWithOptionalPatch.tenantIds) &&
        Objects.equals(this.environmentId, userWithOptionalPatch.environmentId) &&
        Objects.equals(this.userRoles, userWithOptionalPatch.userRoles) &&
        Objects.equals(this.patch, userWithOptionalPatch.patch);
  }

  @Override
  public int hashCode() {
    return Objects.hash(customId, email, firstName, lastName, attributes, settings, id, createdAt, updatedAt, organizationId, tenantIds, environmentId, userRoles, patch);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UserWithOptionalPatch {\n");
    sb.append("    customId: ").append(toIndentedString(customId)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    firstName: ").append(toIndentedString(firstName)).append("\n");
    sb.append("    lastName: ").append(toIndentedString(lastName)).append("\n");
    sb.append("    attributes: ").append(toIndentedString(attributes)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    organizationId: ").append(toIndentedString(organizationId)).append("\n");
    sb.append("    tenantIds: ").append(toIndentedString(tenantIds)).append("\n");
    sb.append("    environmentId: ").append(toIndentedString(environmentId)).append("\n");
    sb.append("    userRoles: ").append(toIndentedString(userRoles)).append("\n");
    sb.append("    patch: ").append(toIndentedString(patch)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("customId");
    openapiFields.add("email");
    openapiFields.add("firstName");
    openapiFields.add("lastName");
    openapiFields.add("attributes");
    openapiFields.add("settings");
    openapiFields.add("id");
    openapiFields.add("createdAt");
    openapiFields.add("updatedAt");
    openapiFields.add("organizationId");
    openapiFields.add("tenantIds");
    openapiFields.add("environmentId");
    openapiFields.add("userRoles");
    openapiFields.add("patch");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("createdAt");
    openapiRequiredFields.add("updatedAt");
    openapiRequiredFields.add("organizationId");
    openapiRequiredFields.add("tenantIds");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to UserWithOptionalPatch
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (UserWithOptionalPatch.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in UserWithOptionalPatch is not found in the empty JSON string", UserWithOptionalPatch.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!UserWithOptionalPatch.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `UserWithOptionalPatch` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : UserWithOptionalPatch.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("customId") != null && !jsonObj.get("customId").isJsonNull()) && !jsonObj.get("customId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `customId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("customId").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("firstName") != null && !jsonObj.get("firstName").isJsonNull()) && !jsonObj.get("firstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `firstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("firstName").toString()));
      }
      if ((jsonObj.get("lastName") != null && !jsonObj.get("lastName").isJsonNull()) && !jsonObj.get("lastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastName").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("organizationId") != null && !jsonObj.get("organizationId").isJsonNull()) && !jsonObj.get("organizationId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `organizationId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("organizationId").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("tenantIds") != null && !jsonObj.get("tenantIds").isJsonNull()) && !jsonObj.get("tenantIds").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `tenantIds` to be an array in the JSON string but got `%s`", jsonObj.get("tenantIds").toString()));
      }
      if ((jsonObj.get("environmentId") != null && !jsonObj.get("environmentId").isJsonNull()) && !jsonObj.get("environmentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `environmentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("environmentId").toString()));
      }
      // validate the optional field `userRoles`
      if (jsonObj.get("userRoles") != null && !jsonObj.get("userRoles").isJsonNull()) {
        UserRoles.validateJsonObject(jsonObj.getAsJsonObject("userRoles"));
      }
      if (jsonObj.get("patch") != null && !jsonObj.get("patch").isJsonNull()) {
        JsonArray jsonArraypatch = jsonObj.getAsJsonArray("patch");
        if (jsonArraypatch != null) {
          // ensure the json data is an array
          if (!jsonObj.get("patch").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `patch` to be an array in the JSON string but got `%s`", jsonObj.get("patch").toString()));
          }

          // validate the optional field `patch` (array)
          for (int i = 0; i < jsonArraypatch.size(); i++) {
            JSONPatchAction.validateJsonObject(jsonArraypatch.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!UserWithOptionalPatch.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'UserWithOptionalPatch' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<UserWithOptionalPatch> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(UserWithOptionalPatch.class));

       return (TypeAdapter<T>) new TypeAdapter<UserWithOptionalPatch>() {
           @Override
           public void write(JsonWriter out, UserWithOptionalPatch value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public UserWithOptionalPatch read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of UserWithOptionalPatch given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of UserWithOptionalPatch
  * @throws IOException if the JSON string is invalid with respect to UserWithOptionalPatch
  */
  public static UserWithOptionalPatch fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, UserWithOptionalPatch.class);
  }

 /**
  * Convert an instance of UserWithOptionalPatch to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

