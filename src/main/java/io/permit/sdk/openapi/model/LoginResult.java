/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.permit.sdk.openapi.model.InviteAttemptResult;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * LoginResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class LoginResult {
  public static final String SERIALIZED_NAME_LOGGED_IN = "logged_in";
  @SerializedName(SERIALIZED_NAME_LOGGED_IN)
  private Boolean loggedIn;

  public static final String SERIALIZED_NAME_EXPIRES_AT = "expires_at";
  @SerializedName(SERIALIZED_NAME_EXPIRES_AT)
  private Integer expiresAt;

  public static final String SERIALIZED_NAME_ACTIVE_ORG_ID = "active_org_id";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ORG_ID)
  private UUID activeOrgId;

  public static final String SERIALIZED_NAME_INVITE_ATTEMPT = "invite_attempt";
  @SerializedName(SERIALIZED_NAME_INVITE_ATTEMPT)
  private InviteAttemptResult inviteAttempt;

  public LoginResult() {
  }

  public LoginResult loggedIn(Boolean loggedIn) {
    
    this.loggedIn = loggedIn;
    return this;
  }

   /**
   * whether login was successful
   * @return loggedIn
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "whether login was successful")

  public Boolean getLoggedIn() {
    return loggedIn;
  }


  public void setLoggedIn(Boolean loggedIn) {
    this.loggedIn = loggedIn;
  }


  public LoginResult expiresAt(Integer expiresAt) {
    
    this.expiresAt = expiresAt;
    return this;
  }

   /**
   * when will the login session expire (the unix timestamp in seconds)
   * @return expiresAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "when will the login session expire (the unix timestamp in seconds)")

  public Integer getExpiresAt() {
    return expiresAt;
  }


  public void setExpiresAt(Integer expiresAt) {
    this.expiresAt = expiresAt;
  }


  public LoginResult activeOrgId(UUID activeOrgId) {
    
    this.activeOrgId = activeOrgId;
    return this;
  }

   /**
   * the active organization on the session after the login
   * @return activeOrgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the active organization on the session after the login")

  public UUID getActiveOrgId() {
    return activeOrgId;
  }


  public void setActiveOrgId(UUID activeOrgId) {
    this.activeOrgId = activeOrgId;
  }


  public LoginResult inviteAttempt(InviteAttemptResult inviteAttempt) {
    
    this.inviteAttempt = inviteAttempt;
    return this;
  }

   /**
   * Get inviteAttempt
   * @return inviteAttempt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public InviteAttemptResult getInviteAttempt() {
    return inviteAttempt;
  }


  public void setInviteAttempt(InviteAttemptResult inviteAttempt) {
    this.inviteAttempt = inviteAttempt;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    LoginResult loginResult = (LoginResult) o;
    return Objects.equals(this.loggedIn, loginResult.loggedIn) &&
        Objects.equals(this.expiresAt, loginResult.expiresAt) &&
        Objects.equals(this.activeOrgId, loginResult.activeOrgId) &&
        Objects.equals(this.inviteAttempt, loginResult.inviteAttempt);
  }

  @Override
  public int hashCode() {
    return Objects.hash(loggedIn, expiresAt, activeOrgId, inviteAttempt);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class LoginResult {\n");
    sb.append("    loggedIn: ").append(toIndentedString(loggedIn)).append("\n");
    sb.append("    expiresAt: ").append(toIndentedString(expiresAt)).append("\n");
    sb.append("    activeOrgId: ").append(toIndentedString(activeOrgId)).append("\n");
    sb.append("    inviteAttempt: ").append(toIndentedString(inviteAttempt)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("logged_in");
    openapiFields.add("expires_at");
    openapiFields.add("active_org_id");
    openapiFields.add("invite_attempt");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("logged_in");
    openapiRequiredFields.add("expires_at");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to LoginResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (LoginResult.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in LoginResult is not found in the empty JSON string", LoginResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!LoginResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `LoginResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : LoginResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("active_org_id") != null && !jsonObj.get("active_org_id").isJsonNull()) && !jsonObj.get("active_org_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_org_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_org_id").toString()));
      }
      // validate the optional field `invite_attempt`
      if (jsonObj.get("invite_attempt") != null && !jsonObj.get("invite_attempt").isJsonNull()) {
        InviteAttemptResult.validateJsonObject(jsonObj.getAsJsonObject("invite_attempt"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!LoginResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'LoginResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<LoginResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(LoginResult.class));

       return (TypeAdapter<T>) new TypeAdapter<LoginResult>() {
           @Override
           public void write(JsonWriter out, LoginResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public LoginResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of LoginResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of LoginResult
  * @throws IOException if the JSON string is invalid with respect to LoginResult
  */
  public static LoginResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, LoginResult.class);
  }

 /**
  * Convert an instance of LoginResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

