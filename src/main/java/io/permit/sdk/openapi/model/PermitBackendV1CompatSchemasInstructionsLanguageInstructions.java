/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.permit.sdk.openapi.model.ProgrammingLanguage;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * PermitBackendV1CompatSchemasInstructionsLanguageInstructions
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class PermitBackendV1CompatSchemasInstructionsLanguageInstructions {
  public static final String SERIALIZED_NAME_LANGUAGE = "language";
  @SerializedName(SERIALIZED_NAME_LANGUAGE)
  private ProgrammingLanguage language;

  public static final String SERIALIZED_NAME_LABEL = "label";
  @SerializedName(SERIALIZED_NAME_LABEL)
  private String label;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private String instructions;

  public PermitBackendV1CompatSchemasInstructionsLanguageInstructions() {
  }

  public PermitBackendV1CompatSchemasInstructionsLanguageInstructions language(ProgrammingLanguage language) {
    
    this.language = language;
    return this;
  }

   /**
   * Get language
   * @return language
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public ProgrammingLanguage getLanguage() {
    return language;
  }


  public void setLanguage(ProgrammingLanguage language) {
    this.language = language;
  }


  public PermitBackendV1CompatSchemasInstructionsLanguageInstructions label(String label) {
    
    this.label = label;
    return this;
  }

   /**
   * Get label
   * @return label
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getLabel() {
    return label;
  }


  public void setLabel(String label) {
    this.label = label;
  }


  public PermitBackendV1CompatSchemasInstructionsLanguageInstructions instructions(String instructions) {
    
    this.instructions = instructions;
    return this;
  }

   /**
   * Get instructions
   * @return instructions
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getInstructions() {
    return instructions;
  }


  public void setInstructions(String instructions) {
    this.instructions = instructions;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    PermitBackendV1CompatSchemasInstructionsLanguageInstructions permitBackendV1CompatSchemasInstructionsLanguageInstructions = (PermitBackendV1CompatSchemasInstructionsLanguageInstructions) o;
    return Objects.equals(this.language, permitBackendV1CompatSchemasInstructionsLanguageInstructions.language) &&
        Objects.equals(this.label, permitBackendV1CompatSchemasInstructionsLanguageInstructions.label) &&
        Objects.equals(this.instructions, permitBackendV1CompatSchemasInstructionsLanguageInstructions.instructions);
  }

  @Override
  public int hashCode() {
    return Objects.hash(language, label, instructions);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class PermitBackendV1CompatSchemasInstructionsLanguageInstructions {\n");
    sb.append("    language: ").append(toIndentedString(language)).append("\n");
    sb.append("    label: ").append(toIndentedString(label)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("language");
    openapiFields.add("label");
    openapiFields.add("instructions");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("language");
    openapiRequiredFields.add("label");
    openapiRequiredFields.add("instructions");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to PermitBackendV1CompatSchemasInstructionsLanguageInstructions
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (PermitBackendV1CompatSchemasInstructionsLanguageInstructions.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in PermitBackendV1CompatSchemasInstructionsLanguageInstructions is not found in the empty JSON string", PermitBackendV1CompatSchemasInstructionsLanguageInstructions.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!PermitBackendV1CompatSchemasInstructionsLanguageInstructions.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `PermitBackendV1CompatSchemasInstructionsLanguageInstructions` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : PermitBackendV1CompatSchemasInstructionsLanguageInstructions.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("label") != null && !jsonObj.get("label").isJsonNull()) && !jsonObj.get("label").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `label` to be a primitive type in the JSON string but got `%s`", jsonObj.get("label").toString()));
      }
      if ((jsonObj.get("instructions") != null && !jsonObj.get("instructions").isJsonNull()) && !jsonObj.get("instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!PermitBackendV1CompatSchemasInstructionsLanguageInstructions.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'PermitBackendV1CompatSchemasInstructionsLanguageInstructions' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<PermitBackendV1CompatSchemasInstructionsLanguageInstructions> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(PermitBackendV1CompatSchemasInstructionsLanguageInstructions.class));

       return (TypeAdapter<T>) new TypeAdapter<PermitBackendV1CompatSchemasInstructionsLanguageInstructions>() {
           @Override
           public void write(JsonWriter out, PermitBackendV1CompatSchemasInstructionsLanguageInstructions value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public PermitBackendV1CompatSchemasInstructionsLanguageInstructions read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of PermitBackendV1CompatSchemasInstructionsLanguageInstructions given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of PermitBackendV1CompatSchemasInstructionsLanguageInstructions
  * @throws IOException if the JSON string is invalid with respect to PermitBackendV1CompatSchemasInstructionsLanguageInstructions
  */
  public static PermitBackendV1CompatSchemasInstructionsLanguageInstructions fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, PermitBackendV1CompatSchemasInstructionsLanguageInstructions.class);
  }

 /**
  * Convert an instance of PermitBackendV1CompatSchemasInstructionsLanguageInstructions to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

