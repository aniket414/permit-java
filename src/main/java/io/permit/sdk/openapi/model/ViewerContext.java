/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.permit.sdk.openapi.model.Viewer;
import io.permit.sdk.openapi.model.ViewerGrant;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * A Viewer Context object represents the currently logged in actor.  - It can be a human user of permit.io - It can be a machine (using an api key) that directly interacts with the api - It can be an (embedded) human user of one of our customers, using an embedded UI interface.  A VC object should contain *all* the data required by the internal authz layer to verify whether an api request is allowed to run.  This model allows us to avoid expensive SQL queries for internal AuthZ logic.
 */
@ApiModel(description = "A Viewer Context object represents the currently logged in actor.  - It can be a human user of permit.io - It can be a machine (using an api key) that directly interacts with the api - It can be an (embedded) human user of one of our customers, using an embedded UI interface.  A VC object should contain *all* the data required by the internal authz layer to verify whether an api request is allowed to run.  This model allows us to avoid expensive SQL queries for internal AuthZ logic.")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class ViewerContext {
  public static final String SERIALIZED_NAME_VIEWER = "viewer";
  @SerializedName(SERIALIZED_NAME_VIEWER)
  private Viewer viewer;

  public static final String SERIALIZED_NAME_GRANTS = "grants";
  @SerializedName(SERIALIZED_NAME_GRANTS)
  private List<ViewerGrant> grants = new ArrayList<>();

  public static final String SERIALIZED_NAME_ACTIVE_ORG_ID = "active_org_id";
  @SerializedName(SERIALIZED_NAME_ACTIVE_ORG_ID)
  private UUID activeOrgId;

  public ViewerContext() {
  }

  public ViewerContext viewer(Viewer viewer) {
    
    this.viewer = viewer;
    return this;
  }

   /**
   * Get viewer
   * @return viewer
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public Viewer getViewer() {
    return viewer;
  }


  public void setViewer(Viewer viewer) {
    this.viewer = viewer;
  }


  public ViewerContext grants(List<ViewerGrant> grants) {
    
    this.grants = grants;
    return this;
  }

  public ViewerContext addGrantsItem(ViewerGrant grantsItem) {
    this.grants.add(grantsItem);
    return this;
  }

   /**
   * Get grants
   * @return grants
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<ViewerGrant> getGrants() {
    return grants;
  }


  public void setGrants(List<ViewerGrant> grants) {
    this.grants = grants;
  }


  public ViewerContext activeOrgId(UUID activeOrgId) {
    
    this.activeOrgId = activeOrgId;
    return this;
  }

   /**
   * the active organization id
   * @return activeOrgId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "the active organization id")

  public UUID getActiveOrgId() {
    return activeOrgId;
  }


  public void setActiveOrgId(UUID activeOrgId) {
    this.activeOrgId = activeOrgId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ViewerContext viewerContext = (ViewerContext) o;
    return Objects.equals(this.viewer, viewerContext.viewer) &&
        Objects.equals(this.grants, viewerContext.grants) &&
        Objects.equals(this.activeOrgId, viewerContext.activeOrgId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(viewer, grants, activeOrgId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ViewerContext {\n");
    sb.append("    viewer: ").append(toIndentedString(viewer)).append("\n");
    sb.append("    grants: ").append(toIndentedString(grants)).append("\n");
    sb.append("    activeOrgId: ").append(toIndentedString(activeOrgId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("viewer");
    openapiFields.add("grants");
    openapiFields.add("active_org_id");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("viewer");
    openapiRequiredFields.add("grants");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ViewerContext
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (ViewerContext.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in ViewerContext is not found in the empty JSON string", ViewerContext.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!ViewerContext.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ViewerContext` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : ViewerContext.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // validate the optional field `viewer`
      if (jsonObj.get("viewer") != null && !jsonObj.get("viewer").isJsonNull()) {
        Viewer.validateJsonObject(jsonObj.getAsJsonObject("viewer"));
      }
      if (jsonObj.get("grants") != null && !jsonObj.get("grants").isJsonNull()) {
        JsonArray jsonArraygrants = jsonObj.getAsJsonArray("grants");
        if (jsonArraygrants != null) {
          // ensure the json data is an array
          if (!jsonObj.get("grants").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `grants` to be an array in the JSON string but got `%s`", jsonObj.get("grants").toString()));
          }

          // validate the optional field `grants` (array)
          for (int i = 0; i < jsonArraygrants.size(); i++) {
            ViewerGrant.validateJsonObject(jsonArraygrants.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("active_org_id") != null && !jsonObj.get("active_org_id").isJsonNull()) && !jsonObj.get("active_org_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `active_org_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("active_org_id").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ViewerContext.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ViewerContext' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ViewerContext> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ViewerContext.class));

       return (TypeAdapter<T>) new TypeAdapter<ViewerContext>() {
           @Override
           public void write(JsonWriter out, ViewerContext value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ViewerContext read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ViewerContext given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ViewerContext
  * @throws IOException if the JSON string is invalid with respect to ViewerContext
  */
  public static ViewerContext fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ViewerContext.class);
  }

 /**
  * Convert an instance of ViewerContext to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

