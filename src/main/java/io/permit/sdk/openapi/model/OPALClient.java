/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * OPALClient
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class OPALClient {
  public static final String SERIALIZED_NAME_D_A_T_A_T_O_P_I_C_S = "DATA_TOPICS";
  @SerializedName(SERIALIZED_NAME_D_A_T_A_T_O_P_I_C_S)
  private List<String> DATA_TOPICS = new ArrayList<>();

  public static final String SERIALIZED_NAME_C_L_I_E_N_T_T_O_K_E_N = "CLIENT_TOKEN";
  @SerializedName(SERIALIZED_NAME_C_L_I_E_N_T_T_O_K_E_N)
  private String CLIENT_TOKEN;

  public static final String SERIALIZED_NAME_S_E_R_V_E_R_U_R_L = "SERVER_URL";
  @SerializedName(SERIALIZED_NAME_S_E_R_V_E_R_U_R_L)
  private String SERVER_URL;

  public static final String SERIALIZED_NAME_S_E_R_V_E_R_W_S_U_R_L = "SERVER_WS_URL";
  @SerializedName(SERIALIZED_NAME_S_E_R_V_E_R_W_S_U_R_L)
  private String SERVER_WS_URL;

  public static final String SERIALIZED_NAME_S_E_R_V_E_R_P_U_B_S_U_B_U_R_L = "SERVER_PUBSUB_URL";
  @SerializedName(SERIALIZED_NAME_S_E_R_V_E_R_P_U_B_S_U_B_U_R_L)
  private String SERVER_PUBSUB_URL;

  public static final String SERIALIZED_NAME_D_E_F_A_U_L_T_D_A_T_A_S_O_U_R_C_E_S_C_O_N_F_I_G_U_R_L = "DEFAULT_DATA_SOURCES_CONFIG_URL";
  @SerializedName(SERIALIZED_NAME_D_E_F_A_U_L_T_D_A_T_A_S_O_U_R_C_E_S_C_O_N_F_I_G_U_R_L)
  private String DEFAULT_DATA_SOURCES_CONFIG_URL;

  public OPALClient() {
  }

  public OPALClient DATA_TOPICS(List<String> DATA_TOPICS) {
    
    this.DATA_TOPICS = DATA_TOPICS;
    return this;
  }

  public OPALClient addDATATOPICSItem(String DATA_TOPICSItem) {
    this.DATA_TOPICS.add(DATA_TOPICSItem);
    return this;
  }

   /**
   * Get DATA_TOPICS
   * @return DATA_TOPICS
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<String> getDATATOPICS() {
    return DATA_TOPICS;
  }


  public void setDATATOPICS(List<String> DATA_TOPICS) {
    this.DATA_TOPICS = DATA_TOPICS;
  }


  public OPALClient CLIENT_TOKEN(String CLIENT_TOKEN) {
    
    this.CLIENT_TOKEN = CLIENT_TOKEN;
    return this;
  }

   /**
   * Get CLIENT_TOKEN
   * @return CLIENT_TOKEN
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getCLIENTTOKEN() {
    return CLIENT_TOKEN;
  }


  public void setCLIENTTOKEN(String CLIENT_TOKEN) {
    this.CLIENT_TOKEN = CLIENT_TOKEN;
  }


  public OPALClient SERVER_URL(String SERVER_URL) {
    
    this.SERVER_URL = SERVER_URL;
    return this;
  }

   /**
   * Get SERVER_URL
   * @return SERVER_URL
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSERVERURL() {
    return SERVER_URL;
  }


  public void setSERVERURL(String SERVER_URL) {
    this.SERVER_URL = SERVER_URL;
  }


  public OPALClient SERVER_WS_URL(String SERVER_WS_URL) {
    
    this.SERVER_WS_URL = SERVER_WS_URL;
    return this;
  }

   /**
   * Get SERVER_WS_URL
   * @return SERVER_WS_URL
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSERVERWSURL() {
    return SERVER_WS_URL;
  }


  public void setSERVERWSURL(String SERVER_WS_URL) {
    this.SERVER_WS_URL = SERVER_WS_URL;
  }


  public OPALClient SERVER_PUBSUB_URL(String SERVER_PUBSUB_URL) {
    
    this.SERVER_PUBSUB_URL = SERVER_PUBSUB_URL;
    return this;
  }

   /**
   * Get SERVER_PUBSUB_URL
   * @return SERVER_PUBSUB_URL
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getSERVERPUBSUBURL() {
    return SERVER_PUBSUB_URL;
  }


  public void setSERVERPUBSUBURL(String SERVER_PUBSUB_URL) {
    this.SERVER_PUBSUB_URL = SERVER_PUBSUB_URL;
  }


  public OPALClient DEFAULT_DATA_SOURCES_CONFIG_URL(String DEFAULT_DATA_SOURCES_CONFIG_URL) {
    
    this.DEFAULT_DATA_SOURCES_CONFIG_URL = DEFAULT_DATA_SOURCES_CONFIG_URL;
    return this;
  }

   /**
   * Get DEFAULT_DATA_SOURCES_CONFIG_URL
   * @return DEFAULT_DATA_SOURCES_CONFIG_URL
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public String getDEFAULTDATASOURCESCONFIGURL() {
    return DEFAULT_DATA_SOURCES_CONFIG_URL;
  }


  public void setDEFAULTDATASOURCESCONFIGURL(String DEFAULT_DATA_SOURCES_CONFIG_URL) {
    this.DEFAULT_DATA_SOURCES_CONFIG_URL = DEFAULT_DATA_SOURCES_CONFIG_URL;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OPALClient opALClient = (OPALClient) o;
    return Objects.equals(this.DATA_TOPICS, opALClient.DATA_TOPICS) &&
        Objects.equals(this.CLIENT_TOKEN, opALClient.CLIENT_TOKEN) &&
        Objects.equals(this.SERVER_URL, opALClient.SERVER_URL) &&
        Objects.equals(this.SERVER_WS_URL, opALClient.SERVER_WS_URL) &&
        Objects.equals(this.SERVER_PUBSUB_URL, opALClient.SERVER_PUBSUB_URL) &&
        Objects.equals(this.DEFAULT_DATA_SOURCES_CONFIG_URL, opALClient.DEFAULT_DATA_SOURCES_CONFIG_URL);
  }

  @Override
  public int hashCode() {
    return Objects.hash(DATA_TOPICS, CLIENT_TOKEN, SERVER_URL, SERVER_WS_URL, SERVER_PUBSUB_URL, DEFAULT_DATA_SOURCES_CONFIG_URL);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OPALClient {\n");
    sb.append("    DATA_TOPICS: ").append(toIndentedString(DATA_TOPICS)).append("\n");
    sb.append("    CLIENT_TOKEN: ").append(toIndentedString(CLIENT_TOKEN)).append("\n");
    sb.append("    SERVER_URL: ").append(toIndentedString(SERVER_URL)).append("\n");
    sb.append("    SERVER_WS_URL: ").append(toIndentedString(SERVER_WS_URL)).append("\n");
    sb.append("    SERVER_PUBSUB_URL: ").append(toIndentedString(SERVER_PUBSUB_URL)).append("\n");
    sb.append("    DEFAULT_DATA_SOURCES_CONFIG_URL: ").append(toIndentedString(DEFAULT_DATA_SOURCES_CONFIG_URL)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("DATA_TOPICS");
    openapiFields.add("CLIENT_TOKEN");
    openapiFields.add("SERVER_URL");
    openapiFields.add("SERVER_WS_URL");
    openapiFields.add("SERVER_PUBSUB_URL");
    openapiFields.add("DEFAULT_DATA_SOURCES_CONFIG_URL");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("DATA_TOPICS");
    openapiRequiredFields.add("CLIENT_TOKEN");
    openapiRequiredFields.add("SERVER_URL");
    openapiRequiredFields.add("SERVER_WS_URL");
    openapiRequiredFields.add("SERVER_PUBSUB_URL");
    openapiRequiredFields.add("DEFAULT_DATA_SOURCES_CONFIG_URL");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OPALClient
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OPALClient.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OPALClient is not found in the empty JSON string", OPALClient.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OPALClient.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OPALClient` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OPALClient.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      // ensure the json data is an array
      if ((jsonObj.get("DATA_TOPICS") != null && !jsonObj.get("DATA_TOPICS").isJsonNull()) && !jsonObj.get("DATA_TOPICS").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `DATA_TOPICS` to be an array in the JSON string but got `%s`", jsonObj.get("DATA_TOPICS").toString()));
      }
      if ((jsonObj.get("CLIENT_TOKEN") != null && !jsonObj.get("CLIENT_TOKEN").isJsonNull()) && !jsonObj.get("CLIENT_TOKEN").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `CLIENT_TOKEN` to be a primitive type in the JSON string but got `%s`", jsonObj.get("CLIENT_TOKEN").toString()));
      }
      if ((jsonObj.get("SERVER_URL") != null && !jsonObj.get("SERVER_URL").isJsonNull()) && !jsonObj.get("SERVER_URL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SERVER_URL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SERVER_URL").toString()));
      }
      if ((jsonObj.get("SERVER_WS_URL") != null && !jsonObj.get("SERVER_WS_URL").isJsonNull()) && !jsonObj.get("SERVER_WS_URL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SERVER_WS_URL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SERVER_WS_URL").toString()));
      }
      if ((jsonObj.get("SERVER_PUBSUB_URL") != null && !jsonObj.get("SERVER_PUBSUB_URL").isJsonNull()) && !jsonObj.get("SERVER_PUBSUB_URL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `SERVER_PUBSUB_URL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("SERVER_PUBSUB_URL").toString()));
      }
      if ((jsonObj.get("DEFAULT_DATA_SOURCES_CONFIG_URL") != null && !jsonObj.get("DEFAULT_DATA_SOURCES_CONFIG_URL").isJsonNull()) && !jsonObj.get("DEFAULT_DATA_SOURCES_CONFIG_URL").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `DEFAULT_DATA_SOURCES_CONFIG_URL` to be a primitive type in the JSON string but got `%s`", jsonObj.get("DEFAULT_DATA_SOURCES_CONFIG_URL").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OPALClient.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OPALClient' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OPALClient> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OPALClient.class));

       return (TypeAdapter<T>) new TypeAdapter<OPALClient>() {
           @Override
           public void write(JsonWriter out, OPALClient value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OPALClient read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OPALClient given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OPALClient
  * @throws IOException if the JSON string is invalid with respect to OPALClient
  */
  public static OPALClient fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OPALClient.class);
  }

 /**
  * Convert an instance of OPALClient to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

