/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.permit.sdk.openapi.model.IdentityRead;
import io.permit.sdk.openapi.model.OnboardingStep;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * OrgMemberRead
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class OrgMemberRead {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_EMAIL_VERIFIED = "email_verified";
  @SerializedName(SERIALIZED_NAME_EMAIL_VERIFIED)
  private Boolean emailVerified;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_GIVEN_NAME = "given_name";
  @SerializedName(SERIALIZED_NAME_GIVEN_NAME)
  private String givenName;

  public static final String SERIALIZED_NAME_FAMILY_NAME = "family_name";
  @SerializedName(SERIALIZED_NAME_FAMILY_NAME)
  private String familyName;

  public static final String SERIALIZED_NAME_PICTURE = "picture";
  @SerializedName(SERIALIZED_NAME_PICTURE)
  private String picture;

  public static final String SERIALIZED_NAME_IS_SUPERUSER = "is_superuser";
  @SerializedName(SERIALIZED_NAME_IS_SUPERUSER)
  private Boolean isSuperuser;

  public static final String SERIALIZED_NAME_IS_ONBOARDING = "is_onboarding";
  @SerializedName(SERIALIZED_NAME_IS_ONBOARDING)
  private Boolean isOnboarding;

  public static final String SERIALIZED_NAME_ONBOARDING_STEP = "onboarding_step";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_STEP)
  private OnboardingStep onboardingStep;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private OffsetDateTime createdAt;

  public static final String SERIALIZED_NAME_LAST_LOGIN = "last_login";
  @SerializedName(SERIALIZED_NAME_LAST_LOGIN)
  private OffsetDateTime lastLogin;

  public static final String SERIALIZED_NAME_LAST_IP = "last_ip";
  @SerializedName(SERIALIZED_NAME_LAST_IP)
  private String lastIp = "0.0.0.0";

  public static final String SERIALIZED_NAME_LOGINS_COUNT = "logins_count";
  @SerializedName(SERIALIZED_NAME_LOGINS_COUNT)
  private Integer loginsCount;

  public static final String SERIALIZED_NAME_IDENTITIES = "identities";
  @SerializedName(SERIALIZED_NAME_IDENTITIES)
  private List<IdentityRead> identities = new ArrayList<>();

  public static final String SERIALIZED_NAME_SETTINGS = "settings";
  @SerializedName(SERIALIZED_NAME_SETTINGS)
  private Object settings;

  public OrgMemberRead() {
  }

  public OrgMemberRead id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Unique id of the account member
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Unique id of the account member")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public OrgMemberRead email(String email) {
    
    this.email = email;
    return this;
  }

   /**
   * Email of the user controlling this account
   * @return email
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Email of the user controlling this account")

  public String getEmail() {
    return email;
  }


  public void setEmail(String email) {
    this.email = email;
  }


  public OrgMemberRead emailVerified(Boolean emailVerified) {
    
    this.emailVerified = emailVerified;
    return this;
  }

   /**
   * Whether this email address is verified or not. For social providers like &#39;Login with Google&#39; this is done automatically, otherwise we will send the user a verification link in email.
   * @return emailVerified
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether this email address is verified or not. For social providers like 'Login with Google' this is done automatically, otherwise we will send the user a verification link in email.")

  public Boolean getEmailVerified() {
    return emailVerified;
  }


  public void setEmailVerified(Boolean emailVerified) {
    this.emailVerified = emailVerified;
  }


  public OrgMemberRead name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Name of this user
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Name of this user")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public OrgMemberRead givenName(String givenName) {
    
    this.givenName = givenName;
    return this;
  }

   /**
   * First name of the user
   * @return givenName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "First name of the user")

  public String getGivenName() {
    return givenName;
  }


  public void setGivenName(String givenName) {
    this.givenName = givenName;
  }


  public OrgMemberRead familyName(String familyName) {
    
    this.familyName = familyName;
    return this;
  }

   /**
   * Last name of the user
   * @return familyName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last name of the user")

  public String getFamilyName() {
    return familyName;
  }


  public void setFamilyName(String familyName) {
    this.familyName = familyName;
  }


  public OrgMemberRead picture(String picture) {
    
    this.picture = picture;
    return this;
  }

   /**
   * URL to picture, photo, or avatar of the user that controls this account.
   * @return picture
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "URL to picture, photo, or avatar of the user that controls this account.")

  public String getPicture() {
    return picture;
  }


  public void setPicture(String picture) {
    this.picture = picture;
  }


  public OrgMemberRead isSuperuser(Boolean isSuperuser) {
    
    this.isSuperuser = isSuperuser;
    return this;
  }

   /**
   * Whether or not this user has special access to permit.io organizations
   * @return isSuperuser
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not this user has special access to permit.io organizations")

  public Boolean getIsSuperuser() {
    return isSuperuser;
  }


  public void setIsSuperuser(Boolean isSuperuser) {
    this.isSuperuser = isSuperuser;
  }


  public OrgMemberRead isOnboarding(Boolean isOnboarding) {
    
    this.isOnboarding = isOnboarding;
    return this;
  }

   /**
   * Whether or not this user is currently onboarding, needs to be replaced by a user journey object
   * @return isOnboarding
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Whether or not this user is currently onboarding, needs to be replaced by a user journey object")

  public Boolean getIsOnboarding() {
    return isOnboarding;
  }


  public void setIsOnboarding(Boolean isOnboarding) {
    this.isOnboarding = isOnboarding;
  }


  public OrgMemberRead onboardingStep(OnboardingStep onboardingStep) {
    
    this.onboardingStep = onboardingStep;
    return this;
  }

   /**
   * the step the user is currently going through in onboarding
   * @return onboardingStep
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "the step the user is currently going through in onboarding")

  public OnboardingStep getOnboardingStep() {
    return onboardingStep;
  }


  public void setOnboardingStep(OnboardingStep onboardingStep) {
    this.onboardingStep = onboardingStep;
  }


  public OrgMemberRead createdAt(OffsetDateTime createdAt) {
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * Date and time when the account member was created (ISO_8601 format).
   * @return createdAt
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Date and time when the account member was created (ISO_8601 format).")

  public OffsetDateTime getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(OffsetDateTime createdAt) {
    this.createdAt = createdAt;
  }


  public OrgMemberRead lastLogin(OffsetDateTime lastLogin) {
    
    this.lastLogin = lastLogin;
    return this;
  }

   /**
   * Last date and time this user logged in (ISO_8601 format).
   * @return lastLogin
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last date and time this user logged in (ISO_8601 format).")

  public OffsetDateTime getLastLogin() {
    return lastLogin;
  }


  public void setLastLogin(OffsetDateTime lastLogin) {
    this.lastLogin = lastLogin;
  }


  public OrgMemberRead lastIp(String lastIp) {
    
    this.lastIp = lastIp;
    return this;
  }

   /**
   * Last IP address from which this user logged in.
   * @return lastIp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Last IP address from which this user logged in.")

  public String getLastIp() {
    return lastIp;
  }


  public void setLastIp(String lastIp) {
    this.lastIp = lastIp;
  }


  public OrgMemberRead loginsCount(Integer loginsCount) {
    
    this.loginsCount = loginsCount;
    return this;
  }

   /**
   * Total number of logins this user has performed.
   * @return loginsCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Total number of logins this user has performed.")

  public Integer getLoginsCount() {
    return loginsCount;
  }


  public void setLoginsCount(Integer loginsCount) {
    this.loginsCount = loginsCount;
  }


  public OrgMemberRead identities(List<IdentityRead> identities) {
    
    this.identities = identities;
    return this;
  }

  public OrgMemberRead addIdentitiesItem(IdentityRead identitiesItem) {
    this.identities.add(identitiesItem);
    return this;
  }

   /**
   * Get identities
   * @return identities
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<IdentityRead> getIdentities() {
    return identities;
  }


  public void setIdentities(List<IdentityRead> identities) {
    this.identities = identities;
  }


  public OrgMemberRead settings(Object settings) {
    
    this.settings = settings;
    return this;
  }

   /**
   * Custom permit.io dashboard settings, such as preferred theme, etc.
   * @return settings
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Custom permit.io dashboard settings, such as preferred theme, etc.")

  public Object getSettings() {
    return settings;
  }


  public void setSettings(Object settings) {
    this.settings = settings;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OrgMemberRead orgMemberRead = (OrgMemberRead) o;
    return Objects.equals(this.id, orgMemberRead.id) &&
        Objects.equals(this.email, orgMemberRead.email) &&
        Objects.equals(this.emailVerified, orgMemberRead.emailVerified) &&
        Objects.equals(this.name, orgMemberRead.name) &&
        Objects.equals(this.givenName, orgMemberRead.givenName) &&
        Objects.equals(this.familyName, orgMemberRead.familyName) &&
        Objects.equals(this.picture, orgMemberRead.picture) &&
        Objects.equals(this.isSuperuser, orgMemberRead.isSuperuser) &&
        Objects.equals(this.isOnboarding, orgMemberRead.isOnboarding) &&
        Objects.equals(this.onboardingStep, orgMemberRead.onboardingStep) &&
        Objects.equals(this.createdAt, orgMemberRead.createdAt) &&
        Objects.equals(this.lastLogin, orgMemberRead.lastLogin) &&
        Objects.equals(this.lastIp, orgMemberRead.lastIp) &&
        Objects.equals(this.loginsCount, orgMemberRead.loginsCount) &&
        Objects.equals(this.identities, orgMemberRead.identities) &&
        Objects.equals(this.settings, orgMemberRead.settings);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, email, emailVerified, name, givenName, familyName, picture, isSuperuser, isOnboarding, onboardingStep, createdAt, lastLogin, lastIp, loginsCount, identities, settings);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OrgMemberRead {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    emailVerified: ").append(toIndentedString(emailVerified)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    givenName: ").append(toIndentedString(givenName)).append("\n");
    sb.append("    familyName: ").append(toIndentedString(familyName)).append("\n");
    sb.append("    picture: ").append(toIndentedString(picture)).append("\n");
    sb.append("    isSuperuser: ").append(toIndentedString(isSuperuser)).append("\n");
    sb.append("    isOnboarding: ").append(toIndentedString(isOnboarding)).append("\n");
    sb.append("    onboardingStep: ").append(toIndentedString(onboardingStep)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    lastLogin: ").append(toIndentedString(lastLogin)).append("\n");
    sb.append("    lastIp: ").append(toIndentedString(lastIp)).append("\n");
    sb.append("    loginsCount: ").append(toIndentedString(loginsCount)).append("\n");
    sb.append("    identities: ").append(toIndentedString(identities)).append("\n");
    sb.append("    settings: ").append(toIndentedString(settings)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("email");
    openapiFields.add("email_verified");
    openapiFields.add("name");
    openapiFields.add("given_name");
    openapiFields.add("family_name");
    openapiFields.add("picture");
    openapiFields.add("is_superuser");
    openapiFields.add("is_onboarding");
    openapiFields.add("onboarding_step");
    openapiFields.add("created_at");
    openapiFields.add("last_login");
    openapiFields.add("last_ip");
    openapiFields.add("logins_count");
    openapiFields.add("identities");
    openapiFields.add("settings");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("email");
    openapiRequiredFields.add("email_verified");
    openapiRequiredFields.add("is_superuser");
    openapiRequiredFields.add("is_onboarding");
    openapiRequiredFields.add("onboarding_step");
    openapiRequiredFields.add("created_at");
    openapiRequiredFields.add("identities");
    openapiRequiredFields.add("settings");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OrgMemberRead
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (OrgMemberRead.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in OrgMemberRead is not found in the empty JSON string", OrgMemberRead.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!OrgMemberRead.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `OrgMemberRead` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : OrgMemberRead.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("given_name") != null && !jsonObj.get("given_name").isJsonNull()) && !jsonObj.get("given_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `given_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("given_name").toString()));
      }
      if ((jsonObj.get("family_name") != null && !jsonObj.get("family_name").isJsonNull()) && !jsonObj.get("family_name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `family_name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("family_name").toString()));
      }
      if ((jsonObj.get("picture") != null && !jsonObj.get("picture").isJsonNull()) && !jsonObj.get("picture").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `picture` to be a primitive type in the JSON string but got `%s`", jsonObj.get("picture").toString()));
      }
      // validate the optional field `onboarding_step`
      if (jsonObj.get("onboarding_step") != null && !jsonObj.get("onboarding_step").isJsonNull()) {
      }
      if ((jsonObj.get("last_ip") != null && !jsonObj.get("last_ip").isJsonNull()) && !jsonObj.get("last_ip").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last_ip` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last_ip").toString()));
      }
      if (jsonObj.get("identities") != null && !jsonObj.get("identities").isJsonNull()) {
        JsonArray jsonArrayidentities = jsonObj.getAsJsonArray("identities");
        if (jsonArrayidentities != null) {
          // ensure the json data is an array
          if (!jsonObj.get("identities").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `identities` to be an array in the JSON string but got `%s`", jsonObj.get("identities").toString()));
          }

          // validate the optional field `identities` (array)
          for (int i = 0; i < jsonArrayidentities.size(); i++) {
            IdentityRead.validateJsonObject(jsonArrayidentities.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OrgMemberRead.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OrgMemberRead' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OrgMemberRead> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OrgMemberRead.class));

       return (TypeAdapter<T>) new TypeAdapter<OrgMemberRead>() {
           @Override
           public void write(JsonWriter out, OrgMemberRead value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public OrgMemberRead read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OrgMemberRead given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OrgMemberRead
  * @throws IOException if the JSON string is invalid with respect to OrgMemberRead
  */
  public static OrgMemberRead fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OrgMemberRead.class);
  }

 /**
  * Convert an instance of OrgMemberRead to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

