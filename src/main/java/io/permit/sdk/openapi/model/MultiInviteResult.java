/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.permit.sdk.openapi.model.FailedInvite;
import io.permit.sdk.openapi.model.InviteRead;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * MultiInviteResult
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class MultiInviteResult {
  public static final String SERIALIZED_NAME_SUCCESS = "success";
  @SerializedName(SERIALIZED_NAME_SUCCESS)
  private List<InviteRead> success = new ArrayList<>();

  public static final String SERIALIZED_NAME_FAILED = "failed";
  @SerializedName(SERIALIZED_NAME_FAILED)
  private List<FailedInvite> failed = null;

  public MultiInviteResult() {
  }

  public MultiInviteResult success(List<InviteRead> success) {
    
    this.success = success;
    return this;
  }

  public MultiInviteResult addSuccessItem(InviteRead successItem) {
    this.success.add(successItem);
    return this;
  }

   /**
   * Get success
   * @return success
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public List<InviteRead> getSuccess() {
    return success;
  }


  public void setSuccess(List<InviteRead> success) {
    this.success = success;
  }


  public MultiInviteResult failed(List<FailedInvite> failed) {
    
    this.failed = failed;
    return this;
  }

  public MultiInviteResult addFailedItem(FailedInvite failedItem) {
    if (this.failed == null) {
      this.failed = new ArrayList<>();
    }
    this.failed.add(failedItem);
    return this;
  }

   /**
   * invites that were not even attempted, and the reason why
   * @return failed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "invites that were not even attempted, and the reason why")

  public List<FailedInvite> getFailed() {
    return failed;
  }


  public void setFailed(List<FailedInvite> failed) {
    this.failed = failed;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    MultiInviteResult multiInviteResult = (MultiInviteResult) o;
    return Objects.equals(this.success, multiInviteResult.success) &&
        Objects.equals(this.failed, multiInviteResult.failed);
  }

  @Override
  public int hashCode() {
    return Objects.hash(success, failed);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class MultiInviteResult {\n");
    sb.append("    success: ").append(toIndentedString(success)).append("\n");
    sb.append("    failed: ").append(toIndentedString(failed)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("success");
    openapiFields.add("failed");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("success");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to MultiInviteResult
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (MultiInviteResult.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in MultiInviteResult is not found in the empty JSON string", MultiInviteResult.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!MultiInviteResult.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `MultiInviteResult` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : MultiInviteResult.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (jsonObj.get("success") != null && !jsonObj.get("success").isJsonNull()) {
        JsonArray jsonArraysuccess = jsonObj.getAsJsonArray("success");
        if (jsonArraysuccess != null) {
          // ensure the json data is an array
          if (!jsonObj.get("success").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `success` to be an array in the JSON string but got `%s`", jsonObj.get("success").toString()));
          }

          // validate the optional field `success` (array)
          for (int i = 0; i < jsonArraysuccess.size(); i++) {
            InviteRead.validateJsonObject(jsonArraysuccess.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("failed") != null && !jsonObj.get("failed").isJsonNull()) {
        JsonArray jsonArrayfailed = jsonObj.getAsJsonArray("failed");
        if (jsonArrayfailed != null) {
          // ensure the json data is an array
          if (!jsonObj.get("failed").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `failed` to be an array in the JSON string but got `%s`", jsonObj.get("failed").toString()));
          }

          // validate the optional field `failed` (array)
          for (int i = 0; i < jsonArrayfailed.size(); i++) {
            FailedInvite.validateJsonObject(jsonArrayfailed.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!MultiInviteResult.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'MultiInviteResult' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<MultiInviteResult> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(MultiInviteResult.class));

       return (TypeAdapter<T>) new TypeAdapter<MultiInviteResult>() {
           @Override
           public void write(JsonWriter out, MultiInviteResult value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public MultiInviteResult read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of MultiInviteResult given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of MultiInviteResult
  * @throws IOException if the JSON string is invalid with respect to MultiInviteResult
  */
  public static MultiInviteResult fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, MultiInviteResult.class);
  }

 /**
  * Convert an instance of MultiInviteResult to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

