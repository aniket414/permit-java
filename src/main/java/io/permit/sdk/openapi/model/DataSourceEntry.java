/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * Data source configuration - where client&#39;s should retrive data from and how they should store it
 */
@ApiModel(description = "Data source configuration - where client's should retrive data from and how they should store it")
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class DataSourceEntry {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_CONFIG = "config";
  @SerializedName(SERIALIZED_NAME_CONFIG)
  private Object config;

  public static final String SERIALIZED_NAME_TOPICS = "topics";
  @SerializedName(SERIALIZED_NAME_TOPICS)
  private List<String> topics = null;

  public static final String SERIALIZED_NAME_DST_PATH = "dst_path";
  @SerializedName(SERIALIZED_NAME_DST_PATH)
  private String dstPath = "";

  public static final String SERIALIZED_NAME_SAVE_METHOD = "save_method";
  @SerializedName(SERIALIZED_NAME_SAVE_METHOD)
  private String saveMethod = "PUT";

  public DataSourceEntry() {
  }

  public DataSourceEntry url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Url source to query for data
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Url source to query for data")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public DataSourceEntry config(Object config) {
    
    this.config = config;
    return this;
  }

   /**
   * Suggested fetcher configuration (e.g. auth or method) to fetch data with
   * @return config
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Suggested fetcher configuration (e.g. auth or method) to fetch data with")

  public Object getConfig() {
    return config;
  }


  public void setConfig(Object config) {
    this.config = config;
  }


  public DataSourceEntry topics(List<String> topics) {
    
    this.topics = topics;
    return this;
  }

  public DataSourceEntry addTopicsItem(String topicsItem) {
    if (this.topics == null) {
      this.topics = new ArrayList<>();
    }
    this.topics.add(topicsItem);
    return this;
  }

   /**
   * topics the data applies to
   * @return topics
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "topics the data applies to")

  public List<String> getTopics() {
    return topics;
  }


  public void setTopics(List<String> topics) {
    this.topics = topics;
  }


  public DataSourceEntry dstPath(String dstPath) {
    
    this.dstPath = dstPath;
    return this;
  }

   /**
   * OPA data api path to store the document at
   * @return dstPath
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "OPA data api path to store the document at")

  public String getDstPath() {
    return dstPath;
  }


  public void setDstPath(String dstPath) {
    this.dstPath = dstPath;
  }


  public DataSourceEntry saveMethod(String saveMethod) {
    
    this.saveMethod = saveMethod;
    return this;
  }

   /**
   * Method used to write into OPA - PUT/PATCH
   * @return saveMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Method used to write into OPA - PUT/PATCH")

  public String getSaveMethod() {
    return saveMethod;
  }


  public void setSaveMethod(String saveMethod) {
    this.saveMethod = saveMethod;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DataSourceEntry dataSourceEntry = (DataSourceEntry) o;
    return Objects.equals(this.url, dataSourceEntry.url) &&
        Objects.equals(this.config, dataSourceEntry.config) &&
        Objects.equals(this.topics, dataSourceEntry.topics) &&
        Objects.equals(this.dstPath, dataSourceEntry.dstPath) &&
        Objects.equals(this.saveMethod, dataSourceEntry.saveMethod);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, config, topics, dstPath, saveMethod);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DataSourceEntry {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    config: ").append(toIndentedString(config)).append("\n");
    sb.append("    topics: ").append(toIndentedString(topics)).append("\n");
    sb.append("    dstPath: ").append(toIndentedString(dstPath)).append("\n");
    sb.append("    saveMethod: ").append(toIndentedString(saveMethod)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("url");
    openapiFields.add("config");
    openapiFields.add("topics");
    openapiFields.add("dst_path");
    openapiFields.add("save_method");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("url");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DataSourceEntry
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DataSourceEntry.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DataSourceEntry is not found in the empty JSON string", DataSourceEntry.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DataSourceEntry.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DataSourceEntry` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DataSourceEntry.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("url") != null && !jsonObj.get("url").isJsonNull()) && !jsonObj.get("url").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `url` to be a primitive type in the JSON string but got `%s`", jsonObj.get("url").toString()));
      }
      // ensure the json data is an array
      if ((jsonObj.get("topics") != null && !jsonObj.get("topics").isJsonNull()) && !jsonObj.get("topics").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `topics` to be an array in the JSON string but got `%s`", jsonObj.get("topics").toString()));
      }
      if ((jsonObj.get("dst_path") != null && !jsonObj.get("dst_path").isJsonNull()) && !jsonObj.get("dst_path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dst_path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dst_path").toString()));
      }
      if ((jsonObj.get("save_method") != null && !jsonObj.get("save_method").isJsonNull()) && !jsonObj.get("save_method").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `save_method` to be a primitive type in the JSON string but got `%s`", jsonObj.get("save_method").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DataSourceEntry.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DataSourceEntry' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DataSourceEntry> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DataSourceEntry.class));

       return (TypeAdapter<T>) new TypeAdapter<DataSourceEntry>() {
           @Override
           public void write(JsonWriter out, DataSourceEntry value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DataSourceEntry read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DataSourceEntry given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DataSourceEntry
  * @throws IOException if the JSON string is invalid with respect to DataSourceEntry
  */
  public static DataSourceEntry fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DataSourceEntry.class);
  }

 /**
  * Convert an instance of DataSourceEntry to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

