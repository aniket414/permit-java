/*
 * Permit.io API
 *  Authorization as a service 
 *
 * The version of the OpenAPI document: 2.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package io.permit.sdk.openapi.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.permit.sdk.openapi.model.DecisionLogResultResponse;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import io.permit.sdk.openapi.JSON;

/**
 * DecisionLogResponse
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2022-10-13T15:32:07.306280+03:00[Asia/Jerusalem]")
public class DecisionLogResponse {
  public static final String SERIALIZED_NAME_RUN_ID = "runId";
  @SerializedName(SERIALIZED_NAME_RUN_ID)
  private UUID runId;

  public static final String SERIALIZED_NAME_DECISION_ID = "decisionId";
  @SerializedName(SERIALIZED_NAME_DECISION_ID)
  private UUID decisionId;

  public static final String SERIALIZED_NAME_TIMESTAMP = "timestamp";
  @SerializedName(SERIALIZED_NAME_TIMESTAMP)
  private OffsetDateTime timestamp;

  public static final String SERIALIZED_NAME_PATH = "path";
  @SerializedName(SERIALIZED_NAME_PATH)
  private String path;

  public static final String SERIALIZED_NAME_INPUT = "input";
  @SerializedName(SERIALIZED_NAME_INPUT)
  private Object input;

  public static final String SERIALIZED_NAME_RESULT = "result";
  @SerializedName(SERIALIZED_NAME_RESULT)
  private DecisionLogResultResponse result;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private UUID id;

  public static final String SERIALIZED_NAME_PDP_ID = "pdpId";
  @SerializedName(SERIALIZED_NAME_PDP_ID)
  private UUID pdpId;

  public DecisionLogResponse() {
  }

  public DecisionLogResponse runId(UUID runId) {
    
    this.runId = runId;
    return this;
  }

   /**
   * Get runId
   * @return runId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getRunId() {
    return runId;
  }


  public void setRunId(UUID runId) {
    this.runId = runId;
  }


  public DecisionLogResponse decisionId(UUID decisionId) {
    
    this.decisionId = decisionId;
    return this;
  }

   /**
   * Get decisionId
   * @return decisionId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getDecisionId() {
    return decisionId;
  }


  public void setDecisionId(UUID decisionId) {
    this.decisionId = decisionId;
  }


  public DecisionLogResponse timestamp(OffsetDateTime timestamp) {
    
    this.timestamp = timestamp;
    return this;
  }

   /**
   * Get timestamp
   * @return timestamp
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public OffsetDateTime getTimestamp() {
    return timestamp;
  }


  public void setTimestamp(OffsetDateTime timestamp) {
    this.timestamp = timestamp;
  }


  public DecisionLogResponse path(String path) {
    
    this.path = path;
    return this;
  }

   /**
   * Get path
   * @return path
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPath() {
    return path;
  }


  public void setPath(String path) {
    this.path = path;
  }


  public DecisionLogResponse input(Object input) {
    
    this.input = input;
    return this;
  }

   /**
   * Get input
   * @return input
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getInput() {
    return input;
  }


  public void setInput(Object input) {
    this.input = input;
  }


  public DecisionLogResponse result(DecisionLogResultResponse result) {
    
    this.result = result;
    return this;
  }

   /**
   * Get result
   * @return result
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public DecisionLogResultResponse getResult() {
    return result;
  }


  public void setResult(DecisionLogResultResponse result) {
    this.result = result;
  }


  public DecisionLogResponse id(UUID id) {
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getId() {
    return id;
  }


  public void setId(UUID id) {
    this.id = id;
  }


  public DecisionLogResponse pdpId(UUID pdpId) {
    
    this.pdpId = pdpId;
    return this;
  }

   /**
   * Get pdpId
   * @return pdpId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "")

  public UUID getPdpId() {
    return pdpId;
  }


  public void setPdpId(UUID pdpId) {
    this.pdpId = pdpId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DecisionLogResponse decisionLogResponse = (DecisionLogResponse) o;
    return Objects.equals(this.runId, decisionLogResponse.runId) &&
        Objects.equals(this.decisionId, decisionLogResponse.decisionId) &&
        Objects.equals(this.timestamp, decisionLogResponse.timestamp) &&
        Objects.equals(this.path, decisionLogResponse.path) &&
        Objects.equals(this.input, decisionLogResponse.input) &&
        Objects.equals(this.result, decisionLogResponse.result) &&
        Objects.equals(this.id, decisionLogResponse.id) &&
        Objects.equals(this.pdpId, decisionLogResponse.pdpId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(runId, decisionId, timestamp, path, input, result, id, pdpId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DecisionLogResponse {\n");
    sb.append("    runId: ").append(toIndentedString(runId)).append("\n");
    sb.append("    decisionId: ").append(toIndentedString(decisionId)).append("\n");
    sb.append("    timestamp: ").append(toIndentedString(timestamp)).append("\n");
    sb.append("    path: ").append(toIndentedString(path)).append("\n");
    sb.append("    input: ").append(toIndentedString(input)).append("\n");
    sb.append("    result: ").append(toIndentedString(result)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    pdpId: ").append(toIndentedString(pdpId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("runId");
    openapiFields.add("decisionId");
    openapiFields.add("timestamp");
    openapiFields.add("path");
    openapiFields.add("input");
    openapiFields.add("result");
    openapiFields.add("id");
    openapiFields.add("pdpId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("runId");
    openapiRequiredFields.add("decisionId");
    openapiRequiredFields.add("timestamp");
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("pdpId");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DecisionLogResponse
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (DecisionLogResponse.openapiRequiredFields.isEmpty()) {
          return;
        } else { // has required fields
          throw new IllegalArgumentException(String.format("The required field(s) %s in DecisionLogResponse is not found in the empty JSON string", DecisionLogResponse.openapiRequiredFields.toString()));
        }
      }

      Set<Entry<String, JsonElement>> entries = jsonObj.entrySet();
      // check to see if the JSON string contains additional fields
      for (Entry<String, JsonElement> entry : entries) {
        if (!DecisionLogResponse.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `DecisionLogResponse` properties. JSON: %s", entry.getKey(), jsonObj.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : DecisionLogResponse.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if ((jsonObj.get("runId") != null && !jsonObj.get("runId").isJsonNull()) && !jsonObj.get("runId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `runId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("runId").toString()));
      }
      if ((jsonObj.get("decisionId") != null && !jsonObj.get("decisionId").isJsonNull()) && !jsonObj.get("decisionId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `decisionId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("decisionId").toString()));
      }
      if ((jsonObj.get("path") != null && !jsonObj.get("path").isJsonNull()) && !jsonObj.get("path").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `path` to be a primitive type in the JSON string but got `%s`", jsonObj.get("path").toString()));
      }
      // validate the optional field `result`
      if (jsonObj.get("result") != null && !jsonObj.get("result").isJsonNull()) {
        DecisionLogResultResponse.validateJsonObject(jsonObj.getAsJsonObject("result"));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("pdpId") != null && !jsonObj.get("pdpId").isJsonNull()) && !jsonObj.get("pdpId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pdpId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pdpId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DecisionLogResponse.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DecisionLogResponse' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DecisionLogResponse> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DecisionLogResponse.class));

       return (TypeAdapter<T>) new TypeAdapter<DecisionLogResponse>() {
           @Override
           public void write(JsonWriter out, DecisionLogResponse value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public DecisionLogResponse read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             return thisAdapter.fromJsonTree(jsonObj);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DecisionLogResponse given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DecisionLogResponse
  * @throws IOException if the JSON string is invalid with respect to DecisionLogResponse
  */
  public static DecisionLogResponse fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DecisionLogResponse.class);
  }

 /**
  * Convert an instance of DecisionLogResponse to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

